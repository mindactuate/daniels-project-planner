{"mappings":"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","sources":["<anon>","src/main.js","src/scripts/state.js","src/scripts/core-logic.js","src/scripts/utils.js","src/scripts/ui.js","src/scripts/gantt.js","src/scripts/dashboard.js","src/scripts/file-handler.js","src/scripts/event-handlers.js"],"sourcesContent":["// main.js\n// Der Haupteinstiegspunkt der Anwendung. Initialisiert alles und verbindet die Module.\n// state.js\n// Verwaltet den globalen Anwendungszustand und die Speicherung im localStorage.\n// core-logic.js\n// Enthält die Kernlogik und komplexe Berechnungen wie den kritischen Pfad.\n\n// utils.js\n// Enthält allgemeine Hilfsfunktionen, insbesondere für die Datumsmanipulation.\nconst $c7997aef068a9f19$export$d1b4f50ae6861a7 = (d1, d2)=>Math.round((d2 - d1) / 86400000);\nfunction $c7997aef068a9f19$export$6b862160d295c8e(dateString) {\n    if (!dateString || typeof dateString !== 'string') return null;\n    // Handle potential timezone offsets by ensuring we parse as UTC\n    if (!dateString.includes('T') && !dateString.includes('Z')) dateString += 'T00:00:00Z';\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return null;\n    // Return a new Date object representing the UTC date parts\n    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\n}\nfunction $c7997aef068a9f19$export$bea76c49158eff2b(date) {\n    if (!date || !(date instanceof Date) || isNaN(date)) return \"\\u2013\";\n    const day = String(date.getUTCDate()).padStart(2, '0');\n    const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n    const year = date.getUTCFullYear();\n    return `${day}.${month}.${year}`;\n}\nfunction $c7997aef068a9f19$export$c478c72000d71dfb(date) {\n    if (!date || !(date instanceof Date) || isNaN(date)) return '';\n    return date.toISOString().split('T')[0];\n}\nfunction $c7997aef068a9f19$export$39bf2e94a8a42e53(startDate, days) {\n    if (!startDate) return null;\n    let date = new Date(startDate.getTime());\n    if (days <= 0) return date;\n    let addedDays = 0;\n    while(addedDays < days){\n        date.setUTCDate(date.getUTCDate() + 1);\n        if (date.getUTCDay() !== 0 && date.getUTCDay() !== 6) addedDays++;\n    }\n    return date;\n}\nfunction $c7997aef068a9f19$export$4061524e7bdcf14c(startDate, days) {\n    if (!startDate) return null;\n    let date = new Date(startDate.getTime());\n    if (days <= 0) return date;\n    let subtractedDays = 0;\n    while(subtractedDays < days){\n        date.setUTCDate(date.getUTCDate() - 1);\n        if (date.getUTCDay() !== 0 && date.getUTCDay() !== 6) subtractedDays++;\n    }\n    return date;\n}\nfunction $c7997aef068a9f19$export$3f4215a9b5171bad(d1, d2) {\n    if (!d1 || !d2) return 0;\n    if (d1.getTime() === d2.getTime()) return 0;\n    let diff = 0;\n    const start = new Date(Math.min(d1, d2));\n    const end = new Date(Math.max(d1, d2));\n    const tempDate = new Date(start);\n    // Ensure we count workdays inclusively for the range\n    while(tempDate <= end){\n        if (tempDate.getUTCDay() !== 0 && tempDate.getUTCDay() !== 6) diff++;\n        tempDate.setUTCDate(tempDate.getUTCDate() + 1);\n    }\n    // Subtract 1 because the difference shouldn't include both start and end day\n    diff = Math.max(0, diff - 1);\n    return d1 > d2 ? -diff : diff;\n}\nconst $c7997aef068a9f19$export$f84dd52f254f04e7 = (element)=>{\n    const row = element.closest('tr');\n    const section = element.closest('.team-section');\n    return {\n        teamId: section ? section.dataset.teamId : null,\n        taskId: row ? parseInt(row.dataset.taskId) : null\n    };\n};\n\n\nfunction $f796a5fd6447bc1a$export$6302a168e58508f7(teamId) {\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    const taskMap = new Map(team.tasks.map((t)=>[\n            t.taskId,\n            t\n        ]));\n    const baselineTaskMap = new Map((team.baselines || []).map((t)=>[\n            t.taskId,\n            t\n        ]));\n    // --- KORREKTUR: Logik zur Verzugsberechnung wieder hier integriert ---\n    let minBaselineStartDate = null;\n    let minActualStartDate = null;\n    // Dates, baselines and data for delay calculation are parsed/prepared for all tasks first\n    team.tasks.forEach((t)=>{\n        t.cycleError = false;\n        t.plannedStart_date = (0, $c7997aef068a9f19$export$6b862160d295c8e)(t.plannedStart);\n        t.plannedEnd_date = (0, $c7997aef068a9f19$export$6b862160d295c8e)(t.plannedEnd);\n        t.actualEnd_date = (0, $c7997aef068a9f19$export$6b862160d295c8e)(t.actualEnd);\n        const baselineTask = baselineTaskMap.get(t.taskId);\n        t.baseline = baselineTask ? {\n            ...baselineTask,\n            plannedEnd_date: (0, $c7997aef068a9f19$export$6b862160d295c8e)(baselineTask.plannedEnd)\n        } : null;\n        // Gather data for project delay calculation\n        const duration = parseInt(t.duration) || 0;\n        const durationCalc = duration > 0 ? duration - 1 : 0;\n        if (t.baseline && t.baseline.plannedEnd_date) {\n            const baselineStartDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(t.baseline.plannedEnd_date, durationCalc);\n            if (!minBaselineStartDate || baselineStartDate < minBaselineStartDate) minBaselineStartDate = baselineStartDate;\n        }\n        if (t.actualEnd_date) {\n            const actualStartDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(t.actualEnd_date, durationCalc);\n            if (!minActualStartDate || actualStartDate < minActualStartDate) minActualStartDate = actualStartDate;\n        }\n    });\n    // Calculate final project delay\n    let projectDelay = 0;\n    if (minBaselineStartDate && minActualStartDate && minActualStartDate > minBaselineStartDate) projectDelay = (0, $c7997aef068a9f19$export$3f4215a9b5171bad)(minBaselineStartDate, minActualStartDate);\n    const hasAnyActuals = team.tasks.some((t)=>!!t.actualEnd_date);\n    // --- ENDE KORREKTUR ---\n    // Identify terminal tasks (tasks that are not a dependency for any other task)\n    const allDependencyIds = new Set();\n    team.tasks.forEach((task)=>{\n        (task.dependency || []).forEach((depId)=>allDependencyIds.add(parseInt(depId)));\n    });\n    team.tasks.forEach((task)=>task.isTerminal = !allDependencyIds.has(task.taskId));\n    // Topological sort is required for both planning modes\n    const { hasCycle: hasCycle, cycleNodes: cycleNodes, sorted: sorted } = $f796a5fd6447bc1a$export$5c0523ec6add5477(team.tasks);\n    if (hasCycle) {\n        cycleNodes.forEach((nodeId)=>{\n            if (taskMap.has(nodeId)) taskMap.get(nodeId).cycleError = true;\n        });\n        return;\n    }\n    // Switch logic based on the selected planning mode\n    if (team.planningMode === \"forward\") {\n        $f796a5fd6447bc1a$var$calculateForwardPlan(taskMap, sorted);\n        $f796a5fd6447bc1a$var$calculateProgressForecast(team, taskMap, sorted, projectDelay);\n    } else {\n        // 'backward' is the default\n        $f796a5fd6447bc1a$var$calculateBackwardPlan(taskMap, sorted);\n        // Nach der reinen Rückwärtsplanung wird eine separate Prognose erstellt,\n        // die den tatsächlichen Fortschritt und den Gesamtprojektverzug berücksichtigt.\n        $f796a5fd6447bc1a$var$calculateBackwardForecast(taskMap, sorted, projectDelay, hasAnyActuals);\n    }\n    // Status und Verzug für alle Modi aktualisieren\n    $f796a5fd6447bc1a$var$updateStatusAndDelay(team, taskMap);\n    team.criticalPath = $f796a5fd6447bc1a$var$calculateCriticalPath(team);\n}\n// --- KORRIGIERT: Funktion für die Forward-Planung berücksichtigt jetzt \"Actual End\" ---\nfunction $f796a5fd6447bc1a$var$calculateForwardPlan(taskMap, sortedTaskIds) {\n    sortedTaskIds.forEach((taskId)=>{\n        const task = taskMap.get(taskId);\n        const duration = parseInt(task.duration) || 0;\n        const durationCalc = duration > 0 ? duration - 1 : 0;\n        // Hinweis: Im Forward-Modus bleiben geplante Daten unabhängig von Actuals.\n        // Abgeschlossene Aufgaben beeinflussen nur die Prognose, nicht den Plan.\n        const anchorStartDate = task.plannedStart_date || null;\n        let latestDepEndDate = null;\n        if (task.dependency && task.dependency.length > 0) task.dependency.forEach((depIdStr)=>{\n            const depTask = taskMap.get(parseInt(depIdStr));\n            if (depTask) {\n                // Für den Plan nur geplante Enddaten der Vorgänger verwenden\n                const effectiveDepEndDate = depTask.plannedEnd_date;\n                if (effectiveDepEndDate) {\n                    if (!latestDepEndDate || effectiveDepEndDate > latestDepEndDate) latestDepEndDate = effectiveDepEndDate;\n                }\n            }\n        });\n        const depDrivenStartDate = latestDepEndDate ? (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(latestDepEndDate, 1) : null;\n        // Effektiver Start: spätestes Datum aus Abhängigkeiten und (optionalem) Anker\n        let effectiveStartDate = null;\n        if (depDrivenStartDate && anchorStartDate) effectiveStartDate = depDrivenStartDate > anchorStartDate ? depDrivenStartDate : anchorStartDate;\n        else if (depDrivenStartDate) effectiveStartDate = depDrivenStartDate;\n        else if (anchorStartDate) effectiveStartDate = anchorStartDate;\n        else effectiveStartDate = null;\n        task.plannedStart_date = effectiveStartDate;\n        // Berechne immer das Enddatum basierend auf dem (potenziell neuen) Startdatum.\n        if (effectiveStartDate) task.plannedEnd_date = (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(effectiveStartDate, durationCalc);\n        else task.plannedEnd_date = null;\n    });\n}\n// --- ÜBERARBEITET: Reine Rückwärtsberechnung des \"Idealplans\" ---\nfunction $f796a5fd6447bc1a$var$calculateBackwardPlan(taskMap, sortedTaskIds) {\n    // Diese Funktion berechnet den \"Idealplan\" basierend auf dem Enddatum der letzten Aufgabe(n).\n    // Sie ignoriert den Fortschritt (actualEnd), um einen reinen, vom Ziel gesteuerten Plan zu erstellen.\n    // Der Fortschritt wird in einem zweiten, separaten Schritt (calculateBackwardForecast) berücksichtigt.\n    const successors = new Map();\n    taskMap.forEach((task)=>successors.set(task.taskId, []));\n    taskMap.forEach((task)=>{\n        (task.dependency || []).forEach((depIdStr)=>{\n            const depId = parseInt(depIdStr);\n            if (successors.has(depId)) successors.get(depId).push(task.taskId);\n        });\n    });\n    // Rückwärtsdurchlauf zur Berechnung des Idealplans\n    for(let i = sortedTaskIds.length - 1; i >= 0; i--){\n        const taskId = sortedTaskIds[i];\n        const task = taskMap.get(taskId);\n        const duration = parseInt(task.duration) || 0;\n        const durationCalc = duration > 0 ? duration - 1 : 0;\n        // Abgeschlossene Aufgaben bleiben im Idealplan unverändert; der Fortschritt beeinflusst nur die Prognose.\n        let calculatedEndDate;\n        if (task.isTerminal) // Für terminale Aufgaben ist das vom Benutzer gesetzte Plandatum der Anker.\n        calculatedEndDate = task.plannedEnd_date;\n        else {\n            // Das Enddatum einer Aufgabe wird durch den frühesten Start ihrer Nachfolger bestimmt.\n            const taskSuccessors = successors.get(taskId);\n            let minSuccessorStartDate = null;\n            if (taskSuccessors && taskSuccessors.length > 0) taskSuccessors.forEach((successorId)=>{\n                const successorTask = taskMap.get(successorId);\n                if (successorTask && successorTask.plannedStart_date) {\n                    if (minSuccessorStartDate === null || successorTask.plannedStart_date < minSuccessorStartDate) minSuccessorStartDate = successorTask.plannedStart_date;\n                }\n            });\n            if (minSuccessorStartDate) calculatedEndDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(minSuccessorStartDate, 1);\n            else // Eine nicht-terminale Aufgabe MUSS ihr Datum von einem Nachfolger ableiten.\n            // Wenn kein Nachfolger ein Datum hat, kann diese Aufgabe auch keins haben.\n            // Das Beibehalten des alten Datums ist falsch und führt zu Inkonsistenzen.\n            calculatedEndDate = null;\n        }\n        task.plannedEnd_date = calculatedEndDate;\n        if (task.plannedEnd_date) task.plannedStart_date = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(task.plannedEnd_date, durationCalc);\n        else task.plannedStart_date = null;\n    }\n}\n// --- ÜBERARBEITET: Prognose mit korrekter Unterscheidung von \"Realität\" und \"Plan\" ---\nfunction $f796a5fd6447bc1a$var$calculateBackwardForecast(taskMap, sortedTaskIds, projectDelay, hasAnyActuals) {\n    // Diese Funktion kombiniert den \"Idealplan\" (plannedEnd) mit der \"Realität\" (actualEnd) und dem Gesamtverzug.\n    // Der Kern der Logik ist die Unterscheidung zwischen Aufgaben, die von einem realen Fortschritt abhängen\n    // (\"reality chain\") und solchen, die das nicht tun (z.B. \"Insel\"-Aufgaben).\n    const earliestPossibleEndDates = new Map();\n    const realityChainTasks = new Set(); // Verfolgt alle Tasks, die von einem actualEnd beeinflusst werden\n    // Schritt 1: Vorwärtsdurchlauf zur Berechnung der \"Realität\" und Identifikation der \"Realitäts-Kette\"\n    sortedTaskIds.forEach((taskId)=>{\n        const task = taskMap.get(taskId);\n        const duration = parseInt(task.duration) || 0;\n        const durationCalc = duration > 0 ? duration - 1 : 0;\n        let earliestStartDate;\n        if (task.actualEnd_date) {\n            earliestPossibleEndDates.set(taskId, task.actualEnd_date);\n            realityChainTasks.add(taskId); // Diese Aufgabe startet oder erweitert die Realitäts-Kette\n            return;\n        }\n        let latestDepEndDate = null;\n        let dependencyInRealityChain = false;\n        if (task.dependency && task.dependency.length > 0) task.dependency.forEach((depIdStr)=>{\n            const depId = parseInt(depIdStr);\n            const depEndDate = earliestPossibleEndDates.get(depId);\n            if (depEndDate) {\n                if (!latestDepEndDate || depEndDate > latestDepEndDate) latestDepEndDate = depEndDate;\n                // Prüfen, ob ein Vorgänger Teil der Realitäts-Kette ist\n                if (realityChainTasks.has(depId)) dependencyInRealityChain = true;\n            }\n        });\n        if (latestDepEndDate) {\n            earliestStartDate = (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(latestDepEndDate, 1);\n            // Wenn ein Vorgänger in der Kette ist, wird diese Aufgabe auch Teil davon\n            if (dependencyInRealityChain) realityChainTasks.add(taskId);\n        } else // Aufgaben ohne Vorgänger basieren zunächst auf ihrem Plan\n        earliestStartDate = task.plannedStart_date;\n        if (earliestStartDate) {\n            const earliestEndDate = (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(earliestStartDate, durationCalc);\n            earliestPossibleEndDates.set(taskId, earliestEndDate);\n        }\n    });\n    // Schritt 2: Kombiniere Idealplan, Realität und Projektverzug zur finalen Prognose\n    taskMap.forEach((task)=>{\n        if (task.actualEnd_date) {\n            task.forwardEnd_date = task.actualEnd_date;\n            return; // Abgeschlossene Aufgaben sind fix\n        }\n        const earliestPossibleDate = earliestPossibleEndDates.get(task.taskId);\n        const isInRealityChain = realityChainTasks.has(task.taskId);\n        // FINALE LOGIK: \"Realität schlägt Plan\"\n        if (isInRealityChain) // Wenn eine Aufgabe von realem Fortschritt abhängt, diktiert dieser die Prognose.\n        task.forwardEnd_date = earliestPossibleDate;\n        else {\n            // Wenn eine Aufgabe NICHT vom Fortschritt abhängt (wie Task 14),\n            // wird ihre Prognose aus einem stabilen Referenzplan plus dem globalen Projektverzug berechnet.\n            // Bevorzugt die Baseline (falls vorhanden), damit das Verschieben des Ankers den New End nicht verändert.\n            const referencePlannedDate = hasAnyActuals ? task.baseline?.plannedEnd_date || task.plannedEnd_date : task.plannedEnd_date;\n            let shiftedPlannedDate = null;\n            if (referencePlannedDate) shiftedPlannedDate = projectDelay > 0 ? (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(referencePlannedDate, projectDelay) : referencePlannedDate;\n            task.forwardEnd_date = shiftedPlannedDate;\n        }\n    });\n}\n// Diese Funktion bleibt für die Vorwärtsplanung bestehen ---\nfunction $f796a5fd6447bc1a$var$calculateProgressForecast(team, taskMap, sortedTaskIds, projectDelay) {\n    // Diese Funktion berechnet die Prognose ('New End') in zwei Schritten:\n    // 1. Ein reiner Vorwärtsdurchlauf basierend auf der Realität (actualEnd) und Abhängigkeiten.\n    //    Dies ergibt die frühestmögliche Endzeit, die durch den bisherigen Fortschritt erzwungen wird.\n    // 2. Die endgültige Prognose ist das spätere Datum von (berechneter Fortschritt) und (geplantes Ende).\n    //    Dies stellt sicher, dass sowohl reale Verzögerungen als auch geplante Puffer berücksichtigt werden.\n    const progressBasedForecasts = new Map();\n    sortedTaskIds.forEach((taskId)=>{\n        const task = taskMap.get(taskId);\n        const duration = parseInt(task.duration) || 0;\n        const durationCalc = duration > 0 ? duration - 1 : 0;\n        // Schritt 1: Berechne die rein auf dem Fortschritt basierende Prognose\n        let progressBasedEndDate;\n        if (task.actualEnd_date) progressBasedEndDate = task.actualEnd_date;\n        else {\n            let forecastStartDate = null;\n            let isAnchor = true;\n            if (task.dependency && task.dependency.length > 0) {\n                let latestDepEndDate = null;\n                task.dependency.forEach((depIdStr)=>{\n                    const depId = parseInt(depIdStr);\n                    const depForecastEndDate = progressBasedForecasts.get(depId);\n                    if (depForecastEndDate) {\n                        if (!latestDepEndDate || depForecastEndDate > latestDepEndDate) latestDepEndDate = depForecastEndDate;\n                    }\n                });\n                if (latestDepEndDate) {\n                    forecastStartDate = (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(latestDepEndDate, 1);\n                    isAnchor = false;\n                }\n            }\n            if (!forecastStartDate) // Für Anker-Aufgaben (ohne Vorgänger) basiert der Fortschritt auf dem Plan\n            forecastStartDate = task.plannedStart_date;\n            if (forecastStartDate) {\n                const effectiveStartDate = isAnchor ? (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(forecastStartDate, projectDelay) : forecastStartDate;\n                progressBasedEndDate = (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(effectiveStartDate, durationCalc);\n            } else progressBasedEndDate = null;\n        }\n        progressBasedForecasts.set(taskId, progressBasedEndDate);\n    });\n    // Schritt 2: Setze die endgültige Prognose\n    taskMap.forEach((task)=>{\n        const progressDate = progressBasedForecasts.get(task.taskId);\n        const planDate = task.plannedEnd_date;\n        // Verwende die fortschrittsbasierte Prognose direkt; falle auf den Plan zurück, wenn keine berechnet werden konnte\n        if (progressDate) task.forwardEnd_date = progressDate;\n        else if (planDate) task.forwardEnd_date = planDate;\n        else task.forwardEnd_date = null;\n    });\n}\nfunction $f796a5fd6447bc1a$var$updateStatusAndDelay(team, taskMap) {\n    taskMap.forEach((task)=>{\n        const useBaseline = team.delayReference === \"baseline\";\n        const comparisonDate = useBaseline && task.baseline ? task.baseline.plannedEnd_date : task.plannedEnd_date;\n        if (comparisonDate && task.forwardEnd_date) task.delay = (0, $c7997aef068a9f19$export$3f4215a9b5171bad)(comparisonDate, task.forwardEnd_date);\n        else task.delay = null;\n        if (task.status !== \"Blocked\") task.status = task.actualEnd_date ? \"Completed\" : \"Not Started\";\n        task.plannedStart = (0, $c7997aef068a9f19$export$c478c72000d71dfb)(task.plannedStart_date);\n        task.plannedEnd = (0, $c7997aef068a9f19$export$c478c72000d71dfb)(task.plannedEnd_date);\n        task.forwardEnd = (0, $c7997aef068a9f19$export$c478c72000d71dfb)(task.forwardEnd_date);\n    });\n}\nfunction $f796a5fd6447bc1a$export$5c0523ec6add5477(tasks) {\n    const adj = new Map();\n    const inDegree = new Map();\n    tasks.forEach((task)=>{\n        adj.set(task.taskId, []);\n        inDegree.set(task.taskId, 0);\n    });\n    tasks.forEach((task)=>{\n        (task.dependency || []).forEach((depIdStr)=>{\n            const depId = parseInt(depIdStr);\n            if (adj.has(depId)) {\n                adj.get(depId).push(task.taskId);\n                inDegree.set(task.taskId, (inDegree.get(task.taskId) || 0) + 1);\n            }\n        });\n    });\n    const queue = [];\n    inDegree.forEach((degree, taskId)=>{\n        if (degree === 0) queue.push(taskId);\n    });\n    const sorted = [];\n    while(queue.length > 0){\n        const u = queue.shift();\n        sorted.push(u);\n        (adj.get(u) || []).forEach((v)=>{\n            inDegree.set(v, inDegree.get(v) - 1);\n            if (inDegree.get(v) === 0) queue.push(v);\n        });\n    }\n    const hasCycle = sorted.length !== tasks.length;\n    let cycleNodes = [];\n    if (hasCycle) inDegree.forEach((degree, taskId)=>{\n        if (degree > 0) cycleNodes.push(taskId);\n    });\n    return {\n        sorted: sorted,\n        hasCycle: hasCycle,\n        cycleNodes: cycleNodes\n    };\n}\nfunction $f796a5fd6447bc1a$var$calculateCriticalPath(team) {\n    const taskMap = new Map(team.tasks.map((t)=>[\n            t.taskId,\n            t\n        ]));\n    const criticalPath = new Set();\n    if (team.tasks.length === 0) return criticalPath;\n    let latestTask = null;\n    team.tasks.forEach((task)=>{\n        if (task.forwardEnd_date && (!latestTask || task.forwardEnd_date > latestTask.forwardEnd_date)) latestTask = task;\n    });\n    if (!latestTask) return criticalPath;\n    let currentTask = latestTask;\n    while(currentTask){\n        criticalPath.add(currentTask.taskId);\n        if (!currentTask.dependency || currentTask.dependency.length === 0) break;\n        let criticalPredecessor = null;\n        const currentStartDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(currentTask.forwardEnd_date, (parseInt(currentTask.duration) || 1) - 1);\n        currentTask.dependency.forEach((depIdStr)=>{\n            const depTask = taskMap.get(parseInt(depIdStr));\n            if (depTask && depTask.forwardEnd_date) {\n                const expectedStartDate = (0, $c7997aef068a9f19$export$39bf2e94a8a42e53)(depTask.forwardEnd_date, 1);\n                if (expectedStartDate.getTime() === currentStartDate.getTime()) {\n                    if (!criticalPredecessor || depTask.forwardEnd_date > criticalPredecessor.forwardEnd_date) criticalPredecessor = depTask;\n                }\n            }\n        });\n        currentTask = criticalPredecessor;\n    }\n    return criticalPath;\n}\n\n\n// ui.js\n// Verantwortlich für alle DOM-Manipulationen und das Rendern der UI.\n\n\n// gantt.js\n// Logik für das Rendern und die Interaktion mit dem Gantt-Diagramm.\n\n\n\nfunction $ccbcfb0497dcc85a$export$674b4b15279e2080(team) {\n    const ganttElement = document.createElement(\"div\");\n    if (!team.tasks || team.tasks.length === 0) return ganttElement;\n    const tasks = team.tasks;\n    const DAY_WIDTH = (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings?.dayWidth || 30;\n    const TASK_COL_WIDTH = (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings?.taskColumnWidth || 250;\n    let minDate = null, maxDate = null;\n    tasks.forEach((task)=>{\n        // berücksichtige Prognose-Ende\n        if (task.forwardEnd_date) {\n            const duration = parseInt(task.duration) || 1;\n            const startDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(task.forwardEnd_date, duration > 0 ? duration - 1 : 0);\n            if (!minDate || startDate < minDate) minDate = startDate;\n            if (!maxDate || task.forwardEnd_date > maxDate) maxDate = task.forwardEnd_date;\n        }\n        // berücksichtige grauen Referenzbalken je nach delayReference\n        if (team.delayReference === \"baseline\") {\n            if (task.baseline && task.baseline.plannedEnd_date) {\n                const baselineDuration = parseInt(task.baseline.duration) || 1;\n                const baselineStartDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(task.baseline.plannedEnd_date, baselineDuration > 0 ? baselineDuration - 1 : 0);\n                if (!minDate || baselineStartDate < minDate) minDate = baselineStartDate;\n                if (!maxDate || task.baseline.plannedEnd_date > maxDate) maxDate = task.baseline.plannedEnd_date;\n            }\n        } else // planned\n        if (task.plannedEnd_date) {\n            const plannedDuration = parseInt(task.duration) || 1;\n            const plannedStartDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(task.plannedEnd_date, plannedDuration > 0 ? plannedDuration - 1 : 0);\n            if (!minDate || plannedStartDate < minDate) minDate = plannedStartDate;\n            if (!maxDate || task.plannedEnd_date > maxDate) maxDate = task.plannedEnd_date;\n        }\n    });\n    if (!minDate || !maxDate) {\n        ganttElement.innerHTML = '<p class=\"text-center text-gray-500 p-4\">Keine g\\xfcltigen Daten f\\xfcr das Gantt-Diagramm vorhanden.</p>';\n        return ganttElement;\n    }\n    const projectStart = new Date(minDate);\n    projectStart.setUTCDate(projectStart.getUTCDate() - 5);\n    const projectEnd = new Date(maxDate);\n    projectEnd.setUTCDate(projectEnd.getUTCDate() + 5);\n    let monthsHeader = \"\", daysHeader = \"\", gridRows = \"\", weekendColumns = \"\";\n    const tempDate = new Date(projectStart);\n    let totalDays = 0;\n    let currentMonth = -1, monthDayCount = 0;\n    const monthNames = [\n        \"Jan\",\n        \"Feb\",\n        \"M\\xe4r\",\n        \"Apr\",\n        \"Mai\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Okt\",\n        \"Nov\",\n        \"Dez\"\n    ];\n    const dayFontSize = DAY_WIDTH < 25 ? \"0.65rem\" : \"0.75rem\";\n    const monthFontSize = DAY_WIDTH < 25 ? \"0.7rem\" : \"0.8rem\";\n    while(tempDate <= projectEnd){\n        const day = tempDate.getUTCDate(), month = tempDate.getUTCMonth();\n        const isWeekend = [\n            0,\n            6\n        ].includes(tempDate.getUTCDay());\n        if (month !== currentMonth) {\n            if (currentMonth !== -1) monthsHeader += `<div class=\"gantt-month\" style=\"width: ${monthDayCount * DAY_WIDTH}px; font-size: ${monthFontSize};\">${monthNames[currentMonth]} ${tempDate.getFullYear()}</div>`;\n            currentMonth = month;\n            monthDayCount = 0;\n        }\n        monthDayCount++;\n        daysHeader += `<div class=\"gantt-day ${isWeekend ? \"weekend\" : \"\"}\" style=\"width: ${DAY_WIDTH}px; font-size: ${dayFontSize};\">${day}</div>`;\n        if (isWeekend) weekendColumns += `<div class=\"gantt-weekend-col\" style=\"left: ${(0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(projectStart, tempDate) * DAY_WIDTH}px; width: ${DAY_WIDTH}px;\"></div>`;\n        tempDate.setUTCDate(tempDate.getUTCDate() + 1);\n        totalDays++;\n    }\n    monthsHeader += `<div class=\"gantt-month\" style=\"width: ${monthDayCount * DAY_WIDTH}px; font-size: ${monthFontSize};\">${monthNames[currentMonth]} ${projectEnd.getFullYear()}</div>`;\n    const totalTimelineWidth = totalDays * DAY_WIDTH;\n    tasks.forEach(()=>gridRows += `<div class=\"gantt-row\" style=\"width: ${totalTimelineWidth}px\"></div>`);\n    const today = new Date();\n    today.setUTCHours(0, 0, 0, 0);\n    const todayOffset = (0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(projectStart, today) * DAY_WIDTH;\n    const todayMarker = today >= projectStart && today <= projectEnd ? `<div class=\"gantt-today-marker\" style=\"left: ${todayOffset}px;\"></div>` : \"\";\n    const bars = tasks.map((task, index)=>{\n        let barHtml = \"\";\n        const topPosition = index * 37;\n        // Render grauer Referenzbalken je nach delayReference\n        if (team.delayReference === \"baseline\") {\n            if (task.baseline && task.baseline.plannedEnd_date) {\n                const baselineDuration = parseInt(task.baseline.duration) || 1;\n                const baselineStartDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(task.baseline.plannedEnd_date, baselineDuration > 0 ? baselineDuration - 1 : 0);\n                const baselineCalendarDays = (0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(baselineStartDate, task.baseline.plannedEnd_date) + 1;\n                const baselineOffset = (0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(projectStart, baselineStartDate) * DAY_WIDTH;\n                const baselineWidth = baselineCalendarDays * DAY_WIDTH;\n                barHtml += `<div class=\"gantt-bar-baseline\" style=\"top: ${topPosition}px; left: ${baselineOffset}px; width: ${baselineWidth}px;\" title=\"Baseline End: ${task.baseline.plannedEnd}\"></div>`;\n            }\n        } else // planned\n        if (task.plannedEnd_date) {\n            const plannedDuration = parseInt(task.duration) || 1;\n            const plannedStartDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(task.plannedEnd_date, plannedDuration > 0 ? plannedDuration - 1 : 0);\n            const plannedCalendarDays = (0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(plannedStartDate, task.plannedEnd_date) + 1;\n            const plannedOffset = (0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(projectStart, plannedStartDate) * DAY_WIDTH;\n            const plannedWidth = plannedCalendarDays * DAY_WIDTH;\n            barHtml += `<div class=\"gantt-bar-baseline\" style=\"top: ${topPosition}px; left: ${plannedOffset}px; width: ${plannedWidth}px;\" title=\"Planned End: ${task.plannedEnd}\"></div>`;\n        }\n        // Render main task bar\n        if (task.forwardEnd_date) {\n            const duration = parseInt(task.duration) || 1;\n            const startDate = (0, $c7997aef068a9f19$export$4061524e7bdcf14c)(task.forwardEnd_date, duration > 0 ? duration - 1 : 0);\n            const calendarDays = (0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(startDate, task.forwardEnd_date) + 1;\n            const width = calendarDays * DAY_WIDTH;\n            const offset = (0, $c7997aef068a9f19$export$d1b4f50ae6861a7)(projectStart, startDate) * DAY_WIDTH;\n            const statusClass = task.status === \"Completed\" ? \"status-completed\" : task.status === \"Blocked\" ? \"status-blocked\" : \"\";\n            const showCriticalPath = !!team.showCriticalPath;\n            const isCritical = team.criticalPath && team.criticalPath.has(task.taskId);\n            const critClass = showCriticalPath ? isCritical ? \"is-critical\" : \"dimmed\" : \"\";\n            const fullLabel = `#${task.taskId}: ${task.taskName || \"\"}`;\n            barHtml += `<div class=\"gantt-bar ${statusClass} ${critClass}\" style=\"top: ${topPosition}px; left: ${offset}px; width: ${width}px;\" title=\"${fullLabel}\">\n                            <span><strong class=\"mr-1\">#${task.taskId}</strong>${task.taskName || \"\"}</span>\n                       </div>`;\n        }\n        return barHtml;\n    }).join(\"\");\n    const taskNames = tasks.map((task)=>`<div class=\"gantt-task-name\" title=\"${task.taskName}\">#${task.taskId}: ${task.taskName || \"\"}</div>`).join(\"\");\n    const headerSpacer = `<div style=\"background-color: #f9fafb; visibility: hidden;\"><div class=\"gantt-header\"><div class=\"gantt-month\">&nbsp;</div></div><div class=\"gantt-days\"><div class=\"gantt-day\">&nbsp;</div></div></div>`;\n    ganttElement.className = \"gantt-container\";\n    ganttElement.style.gridTemplateColumns = `${TASK_COL_WIDTH}px 5px 1fr`;\n    ganttElement.innerHTML = `\n        <div class=\"gantt-tasks\">${headerSpacer}${taskNames}</div>\n        <div class=\"gantt-resizer\"></div>\n        <div class=\"gantt-timeline\">\n            <div class=\"gantt-header-container\" style=\"width: ${totalTimelineWidth}px\">\n                <div class=\"gantt-header\">${monthsHeader}</div>\n                <div class=\"gantt-days\">${daysHeader}</div>\n            </div>\n            <div class=\"gantt-rows\" style=\"width: ${totalTimelineWidth}px\">${weekendColumns}${gridRows}${bars}</div>\n            ${todayMarker}\n        </div>`;\n    return ganttElement;\n}\nfunction $ccbcfb0497dcc85a$export$fbf8042ad30617f1(e) {\n    if (!e.target.classList.contains(\"gantt-resizer\")) return;\n    e.preventDefault();\n    const resizer = e.target;\n    const ganttContainer = resizer.closest(\".gantt-container\");\n    const tasksColumn = ganttContainer.querySelector(\".gantt-tasks\");\n    const startX = e.clientX;\n    const startWidth = tasksColumn.offsetWidth;\n    const doDrag = (moveEvent)=>{\n        const newWidth = startWidth + (moveEvent.clientX - startX);\n        if (newWidth > 150 && newWidth < 800) ganttContainer.style.gridTemplateColumns = `${newWidth}px 5px 1fr`;\n    };\n    const stopDrag = ()=>{\n        document.removeEventListener(\"mousemove\", doDrag);\n        document.removeEventListener(\"mouseup\", stopDrag);\n        (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings.taskColumnWidth = tasksColumn.offsetWidth;\n        (0, $b0be7539779f7498$export$794ff936f9d5ff00)((0, $bfc1bd9ef2af3f3a$export$e5c6bdc1d9c7bb9e));\n    };\n    document.addEventListener(\"mousemove\", doDrag);\n    document.addEventListener(\"mouseup\", stopDrag);\n}\n\n\n// dashboard.js\n// Logik für das Rendern und Aktualisieren des Projekt-Dashboards.\n\n\nlet $61f6a02d249e0911$var$statusChart = null;\nfunction $61f6a02d249e0911$export$82bc199367468d80(teamId = 'all') {\n    const metricsContainer = document.getElementById('dashboard-metrics');\n    if (!metricsContainer) return;\n    const tasks = $61f6a02d249e0911$var$getFilteredTasks(teamId);\n    if (tasks.length === 0) {\n        metricsContainer.innerHTML = '<p class=\"col-span-full text-center text-gray-500\">Keine Daten f\\xfcr das Dashboard verf\\xfcgbar.</p>';\n        if ($61f6a02d249e0911$var$statusChart) {\n            $61f6a02d249e0911$var$statusChart.destroy();\n            $61f6a02d249e0911$var$statusChart = null;\n        }\n        return;\n    }\n    // Calculate KPIs\n    const { endDate: endDate, totalDelay: totalDelay, completionPercentage: completionPercentage, statusCounts: statusCounts } = $61f6a02d249e0911$var$calculateKPIs(tasks);\n    // Render KPI Cards\n    metricsContainer.innerHTML = `\n        <div class=\"kpi-card\">\n            <span class=\"kpi-title\">Projekt-Enddatum</span>\n            <span class=\"kpi-value\">${(0, $c7997aef068a9f19$export$bea76c49158eff2b)(endDate)}</span>\n        </div>\n        <div class=\"kpi-card\">\n            <span class=\"kpi-title\">Maximaler Verzug (Tage)</span>\n            <span class=\"kpi-value ${totalDelay > 0 ? 'text-red-600' : 'text-gray-800'}\">${totalDelay}</span>\n        </div>\n        <div class=\"kpi-card\">\n            <span class=\"kpi-title\">Abgeschlossen</span>\n            <span class=\"kpi-value text-green-600\">${completionPercentage}%</span>\n        </div>\n        <div class=\"kpi-card kpi-chart-container\">\n            <canvas id=\"status-chart\"></canvas>\n        </div>\n    `;\n    // Render Chart\n    $61f6a02d249e0911$var$renderStatusChart(statusCounts);\n}\n/**\r\n * Calculates key performance indicators from a list of tasks.\r\n * @param {Array<Object>} tasks - The list of tasks to analyze.\r\n * @returns {Object} An object containing the calculated KPIs.\r\n */ function $61f6a02d249e0911$var$calculateKPIs(tasks) {\n    let endDate = null;\n    let totalDelay = 0;\n    let completedCount = 0;\n    const statusCounts = {\n        'Completed': 0,\n        'Blocked': 0,\n        'Not Started': 0\n    };\n    tasks.forEach((task)=>{\n        // Find the latest end date\n        if (task.forwardEnd_date && (!endDate || task.forwardEnd_date > endDate)) endDate = task.forwardEnd_date;\n        // Find the maximum positive delay\n        if (task.delay > totalDelay) totalDelay = task.delay;\n        // Count statuses\n        if (task.status === 'Completed') completedCount++;\n        if (statusCounts[task.status] !== undefined) statusCounts[task.status]++;\n        else // Handle potentially undefined statuses gracefully\n        statusCounts['Not Started']++;\n    });\n    const completionPercentage = tasks.length > 0 ? Math.round(completedCount / tasks.length * 100) : 0;\n    return {\n        endDate: endDate,\n        totalDelay: totalDelay,\n        completionPercentage: completionPercentage,\n        statusCounts: statusCounts\n    };\n}\n/**\r\n * Renders or updates the status distribution pie chart.\r\n * @param {Object} statusCounts - An object with counts for each status.\r\n */ function $61f6a02d249e0911$var$renderStatusChart(statusCounts) {\n    const ctx = document.getElementById('status-chart')?.getContext('2d');\n    if (!ctx) return;\n    // --- FIX ---\n    // Destroy the previous chart instance before creating a new one\n    // to prevent rendering issues and memory leaks.\n    if ($61f6a02d249e0911$var$statusChart) {\n        $61f6a02d249e0911$var$statusChart.destroy();\n        $61f6a02d249e0911$var$statusChart = null;\n    }\n    const data = {\n        labels: [\n            'Abgeschlossen',\n            'Blockiert',\n            'Nicht begonnen'\n        ],\n        datasets: [\n            {\n                data: [\n                    statusCounts['Completed'],\n                    statusCounts['Blocked'],\n                    statusCounts['Not Started']\n                ],\n                backgroundColor: [\n                    '#10B981',\n                    '#F59E0B',\n                    '#6B7280' // gray-500\n                ],\n                borderColor: '#ffffff',\n                borderWidth: 2,\n                hoverOffset: 4\n            }\n        ]\n    };\n    $61f6a02d249e0911$var$statusChart = new Chart(ctx, {\n        type: 'doughnut',\n        data: data,\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'top'\n                },\n                title: {\n                    display: true,\n                    text: 'Aufgaben nach Status'\n                }\n            }\n        }\n    });\n}\nfunction $61f6a02d249e0911$export$a12ccce7ebaf51cd() {\n    const filter = document.getElementById('dashboard-team-filter');\n    if (!filter) return;\n    const selectedValue = filter.value;\n    filter.innerHTML = '<option value=\"all\">Gesamtes Projekt</option>';\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.forEach((team)=>{\n        const option = document.createElement('option');\n        option.value = team.id;\n        option.textContent = team.name;\n        filter.appendChild(option);\n    });\n    // Try to preserve selection, default to 'all' if team was deleted\n    if ((0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.some((t)=>t.id === selectedValue)) filter.value = selectedValue;\n    else filter.value = 'all';\n}\n/**\r\n * Gets tasks based on the currently selected filter.\r\n * @param {string} teamId - The ID of the team to filter by, or 'all'.\r\n * @returns {Array<Object>} The filtered list of tasks.\r\n */ function $61f6a02d249e0911$var$getFilteredTasks(teamId) {\n    if (teamId === 'all') return (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.flatMap((team)=>team.tasks);\n    const selectedTeam = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((team)=>team.id === teamId);\n    return selectedTeam ? selectedTeam.tasks : [];\n}\n\n\nfunction $bfc1bd9ef2af3f3a$export$bd45a425ac802846() {\n    const { config: config, teams: teams } = (0, $b0be7539779f7498$export$b72e390a9ebe1648);\n    document.getElementById(\"main-title\").textContent = config.title;\n    document.getElementById(\"main-subtitle\").textContent = config.subtitle;\n    const teamsContainer = document.getElementById(\"project-teams\");\n    const scrollY = window.scrollY;\n    const openGanttCharts = {};\n    document.querySelectorAll(\".gantt-wrapper:not(.hidden)\").forEach((el)=>{\n        openGanttCharts[el.closest(\".team-section\").dataset.teamId] = true;\n    });\n    teamsContainer.innerHTML = \"\";\n    const initialPrompt = document.getElementById(\"initial-prompt\");\n    if (teams.length === 0) {\n        if (initialPrompt) initialPrompt.style.display = \"block\";\n        document.getElementById(\"dashboard-container\").classList.add(\"hidden\");\n        $bfc1bd9ef2af3f3a$export$e5c6bdc1d9c7bb9e();\n    } else {\n        if (initialPrompt) initialPrompt.style.display = \"none\";\n        document.getElementById(\"dashboard-container\").classList.remove(\"hidden\");\n        (0, $61f6a02d249e0911$export$a12ccce7ebaf51cd)();\n        (0, $61f6a02d249e0911$export$82bc199367468d80)(document.getElementById(\"dashboard-team-filter\").value);\n        teams.forEach((team)=>{\n            const teamEl = $bfc1bd9ef2af3f3a$var$renderTeam(team);\n            if (openGanttCharts[team.id]) {\n                teamEl.querySelector(\".gantt-wrapper\").classList.remove(\"hidden\");\n                teamEl.querySelector(\".gantt-controls\").classList.remove(\"hidden\");\n                teamEl.querySelector(\".toggle-gantt-btn\").textContent = \"Gantt-Chart verbergen\";\n            }\n            teamsContainer.appendChild(teamEl);\n        });\n    }\n    window.scrollTo(0, scrollY);\n}\nfunction $bfc1bd9ef2af3f3a$var$renderTeam(team) {\n    const section = document.createElement(\"div\");\n    section.id = team.id;\n    section.className = \"team-section bg-white shadow-lg rounded-lg p-6\";\n    section.dataset.teamId = team.id;\n    const widthOptions = [\n        \"w-20\",\n        \"w-24\",\n        \"w-28\",\n        \"w-32\",\n        \"w-36\",\n        \"w-40\",\n        \"w-48\",\n        \"w-56\",\n        \"w-64\",\n        \"w-72\",\n        \"w-80\",\n        \"w-96\"\n    ];\n    // --- GEÄNDERT: Spalten werden basierend auf dem Planungsmodus gefiltert ---\n    const visibleColumns = (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.columns.filter((col)=>{\n        if (team.planningMode === \"forward\") return col.key !== \"plannedEnd\" || col.type.startsWith(\"display\");\n        if (team.planningMode === \"backward\") return col.key !== \"plannedStart\";\n        return true;\n    });\n    const headerHtml = visibleColumns.map((col)=>{\n        const optionsHtml = widthOptions.map((w)=>`<option value=\"${w}\" ${col.width === w ? \"selected\" : \"\"}>${w.replace(\"w-\", \"\")}</option>`).join(\"\");\n        return `<th class=\"text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${col.width || \"\"}\" data-key=\"${col.key}\">\n                    <div class=\"flex flex-col space-y-1\">\n                        <span>${col.label}</span>\n                        <select data-column-key=\"${col.key}\" class=\"column-width-select text-black font-normal normal-case p-1 text-xs rounded border bg-gray-100 hover:bg-gray-200\">${optionsHtml}</select>\n                    </div>\n                </th>`;\n    }).join(\"\");\n    const dayWidth = (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings?.dayWidth || 30;\n    section.innerHTML = `\n        <div class=\"team-header flex justify-between items-start mb-4 gap-4 flex-wrap\">\n            <div class=\"flex items-center gap-2\">\n                <div class=\"flex items-center gap-2 cursor-pointer toggle-collapse-btn\">\n                    <svg class=\"w-6 h-6 text-gray-600 transition-transform ${team.isCollapsed ? \"-rotate-90\" : \"\"}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\n                    <h2 contenteditable=\"true\" class=\"team-name text-2xl font-bold text-gray-700 p-2\">${team.name}</h2>\n                </div>\n                <!-- --- NEU: Dropdown f\\xfcr den Planungsmodus --- -->\n                <div class=\"planning-mode-selector ml-4\">\n                    <label for=\"planning-mode-${team.id}\" class=\"text-sm font-medium text-gray-700 mr-2\">Planungsmodus:</label>\n                    <select id=\"planning-mode-${team.id}\" class=\"planning-mode-select p-2 border rounded-md bg-gray-50\">\n                        <option value=\"backward\" ${team.planningMode === \"backward\" ? \"selected\" : \"\"}>Backward</option>\n                        <option value=\"forward\" ${team.planningMode === \"forward\" ? \"selected\" : \"\"}>Forward</option>\n                    </select>\n                </div>\n                <!-- --- NEU: Dropdown f\\xfcr die Delay-Referenz --- -->\n                <div class=\"delay-reference-selector ml-4\">\n                    <label for=\"delay-reference-${team.id}\" class=\"text-sm font-medium text-gray-700 mr-2\">Delay-Referenz:</label>\n                    <select id=\"delay-reference-${team.id}\" class=\"delay-reference-select p-2 border rounded-md bg-gray-50\">\n                        <option value=\"planned\" ${team.delayReference === \"planned\" ? \"selected\" : \"\"}>Planned</option>\n                        <option value=\"baseline\" ${team.delayReference === \"baseline\" ? \"selected\" : \"\"}>Baseline</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"flex gap-2 flex-wrap justify-end\">\n                <button class=\"action-btn duplicate-team-btn bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition\">Team duplizieren</button>\n                <button class=\"action-btn set-team-baseline-btn bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition\">Baseline setzen</button>\n                <button class=\"action-btn toggle-gantt-btn bg-cyan-600 text-white px-4 py-2 rounded-md hover:bg-cyan-700 transition\">Gantt-Chart anzeigen</button>\n                <button class=\"action-btn sort-tasks-btn bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700 transition\">Tasks sortieren</button>\n                <button class=\"action-btn delete-team-btn bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition\">Team l\\xf6schen</button>\n            </div>\n        </div>\n        <div class=\"team-content ${team.isCollapsed ? \"hidden\" : \"\"}\">\n            <div class=\"gantt-controls hidden flex flex-wrap items-center gap-x-4 gap-y-2 mb-4 p-3 bg-gray-50 rounded-md border\">\n                <label class=\"text-sm font-medium text-gray-700\">Zoom:</label>\n                <div class=\"flex items-center gap-2\">\n                    <button data-gantt-zoom=\"out\" class=\"gantt-zoom-btn action-btn bg-gray-200 px-2.5 py-1 text-lg font-bold rounded-md hover:bg-gray-300\">-</button>\n                    <span class=\"text-sm font-semibold text-gray-700 w-16 text-center\">${dayWidth}px/Tag</span>\n                    <button data-gantt-zoom=\"in\" class=\"gantt-zoom-btn action-btn bg-gray-200 px-2.5 py-1 text-lg font-bold rounded-md hover:bg-gray-300\">+</button>\n                </div>\n                <div class=\"flex items-center gap-2\">\n                    <input type=\"checkbox\" class=\"critical-path-toggle\" ${team.showCriticalPath ? \"checked\" : \"\"}>\n                    <label class=\"text-sm font-medium text-gray-700 select-none\">Kritischer Pfad</label>\n                </div>\n                <div class=\"ml-auto\">\n                    <button class=\"action-btn screenshot-gantt-btn bg-orange-500 text-white px-4 py-2 rounded-md hover:bg-orange-600 transition text-sm\">Gantt-Chart exportieren</button>\n                </div>\n            </div>\n            <div class=\"gantt-wrapper hidden mb-6\"></div>\n            <div class=\"table-container\">\n                <table class=\"project-table min-w-full divide-y divide-gray-200\">\n                    <thead class=\"bg-gray-50\"><tr>${headerHtml}<th></th></tr></thead>\n                    <tbody class=\"bg-white divide-y divide-gray-200\">${team.tasks.map((task)=>$bfc1bd9ef2af3f3a$var$renderTaskRow(team, task, visibleColumns)).join(\"\")}</tbody>\n                </table>\n            </div>\n            <div class=\"mt-4\"><button class=\"action-btn add-task-btn bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition\">Task hinzuf\\xfcgen +</button></div>\n        </div>`;\n    if (team.tasks.length > 0) section.querySelector(\".gantt-wrapper\").appendChild((0, $ccbcfb0497dcc85a$export$674b4b15279e2080)(team));\n    return section;\n}\nfunction $bfc1bd9ef2af3f3a$var$renderTaskRow(team, task, visibleColumns) {\n    const rowClass = `${task.cycleError ? \"cycle-error\" : \"\"}`;\n    const cells = visibleColumns.map((col)=>{\n        let element = \"\", value = task[col.key] || \"\";\n        const hasDependencies = task.dependency && task.dependency.length > 0;\n        switch(col.type){\n            case \"text-input\":\n                element = `<input type=\"text\" data-key=\"${col.key}\" value=\"${value}\" placeholder=\"${col.placeholder || \"\"}\">`;\n                break;\n            case \"textarea\":\n                element = `<textarea data-key=\"${col.key}\" rows=\"1\" placeholder=\"${col.placeholder || \"\"}\">${value}</textarea>`;\n                break;\n            case \"number-input\":\n                element = `<input type=\"number\" data-key=\"${col.key}\" value=\"${value || col.default}\" min=\"${col.min || 0}\">`;\n                break;\n            case \"date-input\":\n                // --- GEÄNDERT: Logik zur bedingten Anzeige von Start-/Enddatum ---\n                let isReadOnly = false;\n                if (team.planningMode === \"forward\" && col.key === \"plannedStart\" && hasDependencies || team.planningMode === \"backward\" && col.key === \"plannedEnd\" && !task.isTerminal) isReadOnly = true;\n                if (isReadOnly) element = `<span data-key=\"${col.key}\">${(0, $c7997aef068a9f19$export$bea76c49158eff2b)((0, $c7997aef068a9f19$export$6b862160d295c8e)(task[col.key]))}</span>`;\n                else element = `<input type=\"date\" data-key=\"${col.key}\" value=\"${value}\">`;\n                break;\n            case \"select-dependency\":\n                const selectedDeps = task.dependency || [];\n                const selectedNames = selectedDeps.map((id)=>team.tasks.find((t)=>t.taskId == id) ? `#${id}` : \"\").filter(Boolean).join(\", \");\n                const optionsHtml = team.tasks.filter((t)=>t.taskId !== task.taskId).map((opt)=>`\n                    <label class=\"dependency-option\">\n                        <input type=\"checkbox\" class=\"dependency-checkbox\" value=\"${opt.taskId}\" ${selectedDeps.includes(String(opt.taskId)) ? \"checked\" : \"\"}>\n                        <span>#${opt.taskId}: ${(opt.taskName || \"\").substring(0, 40)}</span>\n                    </label>`).join(\"\");\n                element = `<div class=\"dependency-dropdown\" data-key=\"dependency\"><button type=\"button\" class=\"dependency-dropdown-button w-full border rounded-md p-2 bg-white text-left truncate\">${selectedNames || \"Abh\\xe4ngigkeiten w\\xe4hlen...\"}</button><div class=\"dependency-dropdown-panel\">${optionsHtml}</div></div>`;\n                break;\n            case \"select-status\":\n                const statusOptions = col.options.map((o)=>`<option value=\"${o}\" ${value === o ? \"selected\" : \"\"}>${o}</option>`).join(\"\");\n                element = `<select data-key=\"status\">${statusOptions}</select>`;\n                break;\n            case \"display\":\n                let displayValue = col.key === \"forwardEnd\" || col.key === \"plannedEnd\" ? (0, $c7997aef068a9f19$export$bea76c49158eff2b)((0, $c7997aef068a9f19$export$6b862160d295c8e)(value)) : value;\n                element = `<span data-key=\"${col.key}\" class=\"${col.isBold ? \"font-semibold\" : \"\"}\">${displayValue}</span>`;\n                break;\n            case \"display-delay\":\n                const delay = task.delay === null ? \"-\" : task.delay;\n                let delayClass = \"\";\n                if (typeof task.delay === \"number\") delayClass = task.delay < 0 ? \"delay-negative\" : task.delay > 0 ? \"delay-positive\" : \"delay-on-time\";\n                element = `<div data-key=\"${col.key}\" class=\"delay text-center font-bold p-2 rounded-md ${delayClass}\">${delay}</div>`;\n                break;\n        }\n        let cellClass = \"\";\n        if (col.type === \"select-status\") cellClass = ({\n            \"Not Started\": \"status-not-started\",\n            Completed: \"status-completed\",\n            Blocked: \"status-blocked\"\n        })[task.status] || \"\";\n        return `<td class=\"${cellClass}\">${element}</td>`;\n    }).join(\"\");\n    return `<tr data-task-id=\"${task.taskId}\" class=\"${rowClass}\">${cells}<td><button class=\"delete-task-btn text-red-500 hover:text-red-700 font-bold text-xl\">&times;</button></td></tr>`;\n}\nfunction $bfc1bd9ef2af3f3a$export$e5c6bdc1d9c7bb9e(status) {\n    const statusText = document.getElementById(\"save-status-text\");\n    const statusWarning = document.getElementById(\"save-status-warning\");\n    switch(status){\n        case \"saving\":\n            statusText.textContent = \"Speichern...\";\n            statusText.classList.remove(\"text-green-600\");\n            statusWarning.classList.add(\"hidden\");\n            break;\n        case \"saved\":\n            statusText.textContent = \"\\u2713 Alle \\xc4nderungen im Browser-Cache gespeichert\";\n            statusText.classList.add(\"text-green-600\", \"font-medium\");\n            statusWarning.classList.remove(\"hidden\");\n            break;\n        default:\n            statusText.textContent = \"\";\n            statusWarning.classList.add(\"hidden\");\n    }\n}\nfunction $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7(message) {\n    const modal = document.getElementById(\"modal\");\n    document.getElementById(\"modal-text\").textContent = message;\n    document.getElementById(\"modal-confirm-btn\").style.display = \"block\";\n    document.getElementById(\"modal-cancel-btn\").style.display = \"none\";\n    modal.classList.add(\"visible\");\n    document.getElementById(\"modal-confirm-btn\").onclick = ()=>modal.classList.remove(\"visible\");\n}\nfunction $bfc1bd9ef2af3f3a$export$d59ed8aab1dcc70a(message, onConfirm, onCancel = ()=>{}) {\n    const modal = document.getElementById(\"modal\");\n    document.getElementById(\"modal-text\").textContent = message;\n    document.getElementById(\"modal-confirm-btn\").style.display = \"block\";\n    document.getElementById(\"modal-cancel-btn\").style.display = \"block\";\n    modal.classList.add(\"visible\");\n    document.getElementById(\"modal-confirm-btn\").onclick = ()=>{\n        modal.classList.remove(\"visible\");\n        onConfirm();\n    };\n    document.getElementById(\"modal-cancel-btn\").onclick = ()=>{\n        modal.classList.remove(\"visible\");\n        onCancel();\n    };\n}\n\n\nconst $b0be7539779f7498$var$LOCAL_STORAGE_KEY = \"projectPlannerState_v1\";\nlet $b0be7539779f7498$var$saveTimeout = null;\nlet $b0be7539779f7498$export$b72e390a9ebe1648 = {\n    config: {\n        title: \"Projektplaner\",\n        subtitle: \"Lade deine Konfigurations- und Projektdateien, um zu beginnen.\",\n        ganttSettings: {\n            dayWidth: 30,\n            taskColumnWidth: 250\n        },\n        columns: [\n            {\n                key: \"taskId\",\n                label: \"ID\",\n                type: \"display\",\n                width: \"w-20\"\n            },\n            {\n                key: \"taskName\",\n                label: \"Task\",\n                type: \"textarea\",\n                width: \"w-80\",\n                placeholder: \"Task name...\"\n            },\n            {\n                key: \"responsible\",\n                label: \"Responsible\",\n                type: \"text-input\",\n                width: \"w-40\",\n                placeholder: \"Name...\"\n            },\n            {\n                key: \"comment\",\n                label: \"Comment\",\n                type: \"textarea\",\n                width: \"w-72\",\n                placeholder: \"Note...\"\n            },\n            {\n                key: \"dependency\",\n                label: \"Dependency\",\n                type: \"select-dependency\",\n                width: \"w-56\"\n            },\n            {\n                key: \"duration\",\n                label: \"Duration (Days)\",\n                type: \"number-input\",\n                width: \"w-28\",\n                min: 0,\n                default: 1\n            },\n            // --- NEU: Spalte für das geplante Startdatum hinzugefügt ---\n            {\n                key: \"plannedStart\",\n                label: \"Planned Start\",\n                type: \"date-input\",\n                width: \"w-40\"\n            },\n            {\n                key: \"plannedEnd\",\n                label: \"Planned End\",\n                type: \"date-input\",\n                width: \"w-40\"\n            },\n            {\n                key: \"actualEnd\",\n                label: \"Actual End\",\n                type: \"date-input\",\n                width: \"w-40\"\n            },\n            {\n                key: \"forwardEnd\",\n                label: \"New End\",\n                type: \"display\",\n                width: \"w-40\",\n                isBold: true\n            },\n            {\n                key: \"delay\",\n                label: \"Delay (Days)\",\n                type: \"display-delay\",\n                width: \"w-28\",\n                isBold: true,\n                isCentered: true\n            },\n            {\n                key: \"status\",\n                label: \"Status\",\n                type: \"select-status\",\n                width: \"w-40\",\n                options: [\n                    \"Not Started\",\n                    \"Blocked\",\n                    \"Completed\"\n                ]\n            }\n        ]\n    },\n    teams: []\n};\nfunction $b0be7539779f7498$export$794ff936f9d5ff00(statusCallback) {\n    clearTimeout($b0be7539779f7498$var$saveTimeout);\n    if (statusCallback) statusCallback(\"saving\");\n    $b0be7539779f7498$var$saveTimeout = setTimeout(()=>{\n        try {\n            // Create a serializable copy, excluding date objects\n            const stateToSave = JSON.parse(JSON.stringify($b0be7539779f7498$export$b72e390a9ebe1648, (key, value)=>{\n                if (key.endsWith(\"_date\")) return undefined;\n                return value;\n            }));\n            localStorage.setItem($b0be7539779f7498$var$LOCAL_STORAGE_KEY, JSON.stringify(stateToSave));\n            if (statusCallback) statusCallback(\"saved\");\n        } catch (error) {\n            console.error(\"Could not save state to localStorage\", error);\n            (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Fehler: Der Projektstatus konnte nicht lokal gespeichert werden.\");\n            if (statusCallback) statusCallback(\"error\");\n        }\n    }, 500);\n}\nfunction $b0be7539779f7498$export$6152f1d30eb4c063() {\n    try {\n        const savedState = localStorage.getItem($b0be7539779f7498$var$LOCAL_STORAGE_KEY);\n        if (savedState) {\n            const loadedState = JSON.parse(savedState);\n            if (!loadedState.config.ganttSettings) loadedState.config.ganttSettings = {\n                dayWidth: 30,\n                taskColumnWidth: 250\n            };\n            $b0be7539779f7498$export$b72e390a9ebe1648 = loadedState;\n            // Ensure new properties exist for backward compatibility.\n            $b0be7539779f7498$export$b72e390a9ebe1648.teams.forEach((team)=>{\n                if (!team.baselines || !Array.isArray(team.baselines)) team.baselines = [];\n                if (typeof team.isCollapsed !== \"boolean\") team.isCollapsed = false;\n                // --- NEU: Standard-Planungsmodus für ältere Speicherstände setzen ---\n                if (typeof team.planningMode === \"undefined\") team.planningMode = \"backward\";\n                // --- NEU: Standard-Delay-Referenz setzen ---\n                if (!team.delayReference) team.delayReference = \"planned\";\n            });\n            $b0be7539779f7498$export$b72e390a9ebe1648.teams.forEach((team)=>(0, $f796a5fd6447bc1a$export$6302a168e58508f7)(team.id));\n            return true;\n        }\n    } catch (error) {\n        console.error(\"Could not load state from localStorage\", error);\n        localStorage.removeItem($b0be7539779f7498$var$LOCAL_STORAGE_KEY);\n    }\n    return false;\n}\nfunction $b0be7539779f7498$export$bf5236ebcba83552(teamId, taskId, key, value) {\n    const team = $b0be7539779f7498$export$b72e390a9ebe1648.teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    const task = team.tasks.find((t)=>t.taskId === taskId);\n    if (!task) return;\n    task[key] = value;\n}\nfunction $b0be7539779f7498$export$8921d147d4d1b7(newState) {\n    $b0be7539779f7498$export$b72e390a9ebe1648 = newState;\n}\n\n\n\n\n// file-handler.js\n// Kümmert sich um das Laden und Speichern von Projektdateien (JSON) und optional CSV-Export.\n\n\n\n// Entfernt: handleConfigUpload, handleSaveToConfig, handleProjectUpload\n// --- Datei-Kontext & Dirty-Tracking ---\nlet $6f43f11e51b5b35f$var$currentProjectHandle = null;\nlet $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\nfunction $6f43f11e51b5b35f$export$82bd239cdc30d25() {\n    $6f43f11e51b5b35f$var$dirtySinceFileSave = true;\n}\nfunction $6f43f11e51b5b35f$export$2d34fbc2c71a78ff() {\n    return $6f43f11e51b5b35f$var$dirtySinceFileSave;\n}\nfunction $6f43f11e51b5b35f$export$9ad2828a0a3f778() {\n    $6f43f11e51b5b35f$export$82bd239cdc30d25();\n    (0, $b0be7539779f7498$export$794ff936f9d5ff00)((0, $bfc1bd9ef2af3f3a$export$e5c6bdc1d9c7bb9e));\n}\nfunction $6f43f11e51b5b35f$var$serializeProjectData() {\n    if (!(0, $b0be7539779f7498$export$b72e390a9ebe1648)) return \"{}\";\n    // Titel/Untertitel und Spaltenbreite aktualisieren wie bei der Konfig-Speicherung\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.title = document.getElementById(\"main-title\").textContent;\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.subtitle = document.getElementById(\"main-subtitle\").textContent;\n    const visibleGanttTasks = document.querySelector(\".gantt-wrapper:not(.hidden) .gantt-tasks\");\n    if (visibleGanttTasks && visibleGanttTasks.offsetWidth > 0) (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings.taskColumnWidth = visibleGanttTasks.offsetWidth;\n    // Hilfsfunktionen für Ankerlogik\n    const isSourceTask = (task)=>!task.dependency || task.dependency.length === 0;\n    const buildDependencySet = (tasks)=>{\n        const s = new Set();\n        tasks.forEach((t)=>(t.dependency || []).forEach((d)=>s.add(parseInt(d))));\n        return s;\n    };\n    const compactTeams = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.map((team)=>{\n        const depSet = buildDependencySet(team.tasks || []);\n        const compactTasks = (team.tasks || []).map((task)=>{\n            const isTerminal = !depSet.has(task.taskId);\n            const isSource = isSourceTask(task);\n            const compact = {\n                taskId: task.taskId\n            };\n            // Pflichtfelder\n            compact.duration = task.duration;\n            // Freitextfelder nur wenn nicht leer\n            if (task.taskName) compact.taskName = task.taskName;\n            if (task.responsible) compact.responsible = task.responsible;\n            if (task.comment) compact.comment = task.comment;\n            // Abhängigkeiten nur wenn vorhanden\n            if (task.dependency && task.dependency.length > 0) compact.dependency = task.dependency;\n            // Ankerdaten je Modus speichern\n            if (team.planningMode === \"backward\") {\n                if (isTerminal && task.plannedEnd) compact.plannedEnd = task.plannedEnd;\n            } else if (isSource && task.plannedStart) compact.plannedStart = task.plannedStart;\n            // Actuals\n            if (task.actualEnd) compact.actualEnd = task.actualEnd;\n            // Status nur wenn \"Blocked\" (sonst abgeleitet)\n            if (task.status === \"Blocked\") compact.status = \"Blocked\";\n            return compact;\n        });\n        // Baseline minimal: geplantes Ende und Dauer (Start ist ableitbar)\n        const compactBaselines = (team.baselines || []).map((b)=>{\n            const base = {\n                taskId: b.taskId\n            };\n            if (b.plannedEnd) base.plannedEnd = b.plannedEnd;\n            if (b.duration) base.duration = b.duration;\n            return base;\n        });\n        return {\n            id: team.id,\n            name: team.name,\n            planningMode: team.planningMode || \"backward\",\n            delayReference: team.delayReference || \"planned\",\n            isCollapsed: !!team.isCollapsed,\n            lastTaskId: team.lastTaskId || team.tasks?.reduce((m, t)=>Math.max(m, parseInt(t.taskId) || 0), 0) || 0,\n            tasks: compactTasks,\n            baselines: compactBaselines\n        };\n    });\n    const projectData = {\n        config: (0, $b0be7539779f7498$export$b72e390a9ebe1648).config,\n        teams: compactTeams\n    };\n    const serialized = JSON.stringify(projectData, (key, value)=>{\n        // Entferne transiente Felder (z.B. *_date)\n        if (typeof key === \"string\" && key.endsWith(\"_date\")) return undefined;\n        return value;\n    }, 2);\n    return serialized;\n}\nfunction $6f43f11e51b5b35f$var$loadProjectFromObject(loaded) {\n    // Unterstütze sowohl {config, teams} als auch direkte appState-Form\n    const config = loaded.config || loaded?.appState?.config;\n    const teams = loaded.teams || loaded?.appState?.teams;\n    if (!config || !Array.isArray(config.columns) || !Array.isArray(teams)) {\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Ung\\xfcltige Projektdatei. Erwartet { config, teams }.\");\n        return false;\n    }\n    // Merge Gantt-Einstellungen behutsam\n    config.ganttSettings = {\n        ...(0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings,\n        ...config.ganttSettings\n    };\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).config = config;\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams = teams;\n    // Backward-Kompatibilität und Defaults\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.forEach((team)=>{\n        if (!team.baselines || !Array.isArray(team.baselines)) team.baselines = [];\n        if (typeof team.isCollapsed !== \"boolean\") team.isCollapsed = false;\n        if (typeof team.planningMode === \"undefined\") team.planningMode = \"backward\";\n        if (!team.delayReference) team.delayReference = \"planned\";\n        if (!team.lastTaskId) team.lastTaskId = team.tasks?.reduce((m, t)=>Math.max(m, parseInt(t.taskId) || 0), 0) || 0;\n    });\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.forEach((team)=>(0, $f796a5fd6447bc1a$export$6302a168e58508f7)(team.id));\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $b0be7539779f7498$export$794ff936f9d5ff00)(null);\n    (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Projektdatei erfolgreich geladen!\");\n    return true;\n}\nfunction $6f43f11e51b5b35f$export$909b5a7846cea973(text) {\n    try {\n        const loaded = JSON.parse(text);\n        const ok = $6f43f11e51b5b35f$var$loadProjectFromObject(loaded);\n        if (ok) {\n            $6f43f11e51b5b35f$var$currentProjectHandle = null;\n            $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\n        }\n    } catch (error) {\n        console.error(\"Projekt-JSON Parse Error:\", error);\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Ein Fehler ist beim Laden der Projektdatei aufgetreten.\");\n    }\n}\nfunction $6f43f11e51b5b35f$var$supportsFSAccess() {\n    return window.isSecureContext && typeof window.showOpenFilePicker === \"function\" && typeof window.showSaveFilePicker === \"function\";\n}\nasync function $6f43f11e51b5b35f$var$verifyPermission(fileHandle, readWrite) {\n    const opts = {\n        mode: readWrite ? \"readwrite\" : \"read\"\n    };\n    if (await fileHandle.queryPermission(opts) === \"granted\") return true;\n    if (await fileHandle.requestPermission(opts) === \"granted\") return true;\n    return false;\n}\nasync function $6f43f11e51b5b35f$var$writeFile(handle, contents) {\n    const writable = await handle.createWritable();\n    await writable.write(contents);\n    await writable.close();\n}\nasync function $6f43f11e51b5b35f$export$fa346957d93536fa() {\n    try {\n        if (!$6f43f11e51b5b35f$var$supportsFSAccess()) {\n            // Fallback: Trigger des versteckten Inputs\n            document.getElementById(\"project-json-upload\").click();\n            return;\n        }\n        const [handle] = await window.showOpenFilePicker({\n            types: [\n                {\n                    description: \"Project JSON\",\n                    accept: {\n                        \"application/json\": [\n                            \".json\",\n                            \".project.json\"\n                        ]\n                    }\n                }\n            ],\n            excludeAcceptAllOption: false,\n            multiple: false\n        });\n        if (!handle) return;\n        if (!await $6f43f11e51b5b35f$var$verifyPermission(handle, false)) return;\n        const file = await handle.getFile();\n        const text = await file.text();\n        const loaded = JSON.parse(text);\n        const ok = $6f43f11e51b5b35f$var$loadProjectFromObject(loaded);\n        if (ok) {\n            $6f43f11e51b5b35f$var$currentProjectHandle = handle;\n            $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\n        }\n    } catch (err) {\n        if (err?.name !== \"AbortError\") {\n            console.error(\"Open via picker failed:\", err);\n            (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Datei konnte nicht ge\\xf6ffnet werden.\");\n        }\n    }\n}\nasync function $6f43f11e51b5b35f$export$fa43b9a89289c997() {\n    try {\n        const serialized = $6f43f11e51b5b35f$var$serializeProjectData();\n        if ($6f43f11e51b5b35f$var$currentProjectHandle && $6f43f11e51b5b35f$var$supportsFSAccess() && await $6f43f11e51b5b35f$var$verifyPermission($6f43f11e51b5b35f$var$currentProjectHandle, true)) {\n            await $6f43f11e51b5b35f$var$writeFile($6f43f11e51b5b35f$var$currentProjectHandle, serialized);\n            $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\n            (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Projektdatei gespeichert (Schnell speichern).\");\n            return;\n        }\n        // Fallback: Save As Dialog\n        await $6f43f11e51b5b35f$export$45540aa3bfa32b7(serialized);\n    } catch (err) {\n        console.error(\"Quick save failed:\", err);\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Speichern fehlgeschlagen.\");\n    }\n}\nasync function $6f43f11e51b5b35f$export$45540aa3bfa32b7(preSerialized = null) {\n    try {\n        const serialized = preSerialized ?? $6f43f11e51b5b35f$var$serializeProjectData();\n        if ($6f43f11e51b5b35f$var$supportsFSAccess()) {\n            const suggestedName = (document.getElementById(\"main-title\").textContent.trim().replace(/\\s+/g, \"_\") || \"projekt\") + \".project.json\";\n            const handle = await window.showSaveFilePicker({\n                suggestedName: suggestedName,\n                types: [\n                    {\n                        description: \"Project JSON\",\n                        accept: {\n                            \"application/json\": [\n                                \".json\",\n                                \".project.json\"\n                            ]\n                        }\n                    }\n                ],\n                excludeAcceptAllOption: false\n            });\n            if (!await $6f43f11e51b5b35f$var$verifyPermission(handle, true)) return;\n            await $6f43f11e51b5b35f$var$writeFile(handle, serialized);\n            $6f43f11e51b5b35f$var$currentProjectHandle = handle;\n            $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\n            (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Projektdatei gespeichert.\");\n            return;\n        }\n        // Fallback: Download\n        const blob = new Blob([\n            serialized\n        ], {\n            type: \"application/json\"\n        });\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        const fileName = document.getElementById(\"main-title\").textContent.trim().replace(/\\s+/g, \"_\") || \"projekt\";\n        link.download = `${fileName}.project.json`;\n        link.click();\n        URL.revokeObjectURL(link.href);\n        $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Projektdatei gespeichert.\");\n    } catch (err) {\n        if (err?.name !== \"AbortError\") {\n            console.error(\"Save As failed:\", err);\n            (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Speichern fehlgeschlagen.\");\n        }\n    }\n}\nfunction $6f43f11e51b5b35f$var$parseCSVAndRender(csvText) {\n    try {\n        const lines = csvText.trim().split(\"\\n\");\n        const headers = lines.shift().split(\",\").map((h)=>h.trim().replace(/\"/g, \"\"));\n        const data = lines.map((line)=>{\n            const values = line.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n            const obj = {};\n            headers.forEach((header, index)=>{\n                let value = (values[index] || \"\").trim().replace(/^\"|\"$/g, \"\").replace(/\"\"/g, '\"');\n                obj[header] = value;\n            });\n            return obj;\n        });\n        const teamsMap = new Map();\n        const baselineKeys = headers.filter((h)=>h.startsWith(\"baseline_\")).map((h)=>h.replace(\"baseline_\", \"\"));\n        data.forEach((row)=>{\n            if (!row.teamId) return;\n            if (!teamsMap.has(row.teamId)) teamsMap.set(row.teamId, {\n                id: row.teamId,\n                name: row.teamName,\n                tasks: [],\n                baselines: [],\n                lastTaskId: 0,\n                planningMode: row.planningMode || \"backward\",\n                delayReference: row.delayReference || \"planned\"\n            });\n            const team = teamsMap.get(row.teamId);\n            const taskId = parseInt(row.taskId);\n            const taskData = {\n                ...row,\n                taskId: taskId,\n                dependency: (row.dependency || \"\").split(\";\").filter((id)=>id.trim())\n            };\n            team.tasks.push(taskData);\n            team.lastTaskId = Math.max(team.lastTaskId, taskId);\n            const baselineTask = {\n                taskId: taskId\n            };\n            let hasBaselineData = false;\n            baselineKeys.forEach((key)=>{\n                const baselineHeader = `baseline_${key}`;\n                if (row[baselineHeader]) {\n                    baselineTask[key] = row[baselineHeader];\n                    hasBaselineData = true;\n                }\n            });\n            if (hasBaselineData) team.baselines.push(baselineTask);\n        });\n        if (teamsMap.size === 0) return (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Keine g\\xfcltigen Team-Daten in der CSV-Datei gefunden.\");\n        (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams = Array.from(teamsMap.values());\n        (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.forEach((team)=>(0, $f796a5fd6447bc1a$export$6302a168e58508f7)(team.id));\n        (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        (0, $b0be7539779f7498$export$794ff936f9d5ff00)(null);\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Projekt erfolgreich geladen!\");\n    } catch (error) {\n        console.error(\"CSV Parse Error:\", error);\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Ein Fehler ist beim Parsen der CSV-Datei aufgetreten.\");\n    }\n}\nfunction $6f43f11e51b5b35f$export$9c92a1887eaf05e3() {\n    if ((0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.length === 0) return (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Keine Daten zum Speichern vorhanden.\");\n    const columnKeys = (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.columns.map((c)=>c.key);\n    const baselineKeysToSave = [\n        \"plannedStart\",\n        \"plannedEnd\",\n        \"duration\"\n    ];\n    const baselineHeaders = baselineKeysToSave.map((k)=>`baseline_${k}`);\n    const csvHeaders = [\n        \"teamId\",\n        \"teamName\",\n        \"planningMode\",\n        \"delayReference\",\n        ...columnKeys,\n        ...baselineHeaders\n    ];\n    const dataRows = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.flatMap((team)=>{\n        const baselineMap = new Map((team.baselines || []).map((b)=>[\n                b.taskId,\n                b\n            ]));\n        return team.tasks.map((task)=>{\n            const row = {\n                teamId: team.id,\n                teamName: team.name,\n                planningMode: team.planningMode,\n                delayReference: team.delayReference || \"planned\"\n            };\n            columnKeys.forEach((key)=>{\n                let value = task[key];\n                if (Array.isArray(value)) value = value.join(\";\");\n                if (typeof value === \"string\" && (value.includes(\",\") || value.includes('\"') || value.includes(\"\\n\"))) value = `\"${value.replace(/\\\"/g, '\"\"')}\"`;\n                row[key] = value;\n            });\n            const baselineTask = baselineMap.get(task.taskId);\n            baselineKeysToSave.forEach((key)=>{\n                row[`baseline_${key}`] = baselineTask ? baselineTask[key] || \"\" : \"\";\n            });\n            return row;\n        });\n    });\n    let csvContent = csvHeaders.join(\",\") + \"\\n\";\n    csvContent += dataRows.map((row)=>csvHeaders.map((header)=>row[header] ?? \"\").join(\",\")).join(\"\\n\");\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    const fileName = document.getElementById(\"main-title\").textContent.trim().replace(/\\s+/g, \"_\") || \"projekt\";\n    link.download = `${fileName}.csv`;\n    link.click();\n    URL.revokeObjectURL(link.href);\n}\nfunction $6f43f11e51b5b35f$export$ce766a5fa32b2368(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = (e)=>{\n        try {\n            const loaded = JSON.parse(e.target.result);\n            const ok = $6f43f11e51b5b35f$var$loadProjectFromObject(loaded);\n            if (ok) {\n                $6f43f11e51b5b35f$var$currentProjectHandle = null;\n                $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\n            }\n        } catch (error) {\n            console.error(\"Projekt-JSON Parse Error:\", error);\n            (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Ein Fehler ist beim Laden der Projektdatei aufgetreten.\");\n        }\n    };\n    reader.readAsText(file);\n}\nfunction $6f43f11e51b5b35f$export$9b25e6ff894eab41() {\n    // Beibehalten als expliziter Download-Export\n    if (!(0, $b0be7539779f7498$export$b72e390a9ebe1648)) return;\n    const serialized = $6f43f11e51b5b35f$var$serializeProjectData();\n    const blob = new Blob([\n        serialized\n    ], {\n        type: \"application/json\"\n    });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    const fileName = document.getElementById(\"main-title\").textContent.trim().replace(/\\s+/g, \"_\") || \"projekt\";\n    link.download = `${fileName}.project.json`;\n    link.click();\n    URL.revokeObjectURL(link.href);\n    $6f43f11e51b5b35f$var$dirtySinceFileSave = false;\n}\n\n\n// event-handlers.js\n// Bündelt alle Event-Handler und Aktionen, die durch Benutzerinteraktion ausgelöst werden.\n\n\n\n\n\nfunction $decb44ba0b4d213b$export$2fc9146f71db8986(e) {\n    const target = e.target;\n    const { teamId: teamId, taskId: taskId } = (0, $c7997aef068a9f19$export$f84dd52f254f04e7)(target);\n    if (!teamId) return;\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    if (target.classList.contains(\"column-width-select\")) {\n        $decb44ba0b4d213b$var$handleColumnWidthChange(target.dataset.columnKey, target.value);\n        return;\n    }\n    // --- NEU: Event-Handler für den Planungsmodus-Wechsel ---\n    if (target.classList.contains(\"planning-mode-select\")) {\n        team.planningMode = target.value;\n        (0, $f796a5fd6447bc1a$export$6302a168e58508f7)(teamId);\n        (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n        return;\n    }\n    // --- NEU: Event-Handler für die Delay-Referenz ---\n    if (target.classList.contains(\"delay-reference-select\")) {\n        team.delayReference = target.value;\n        (0, $f796a5fd6447bc1a$export$6302a168e58508f7)(teamId);\n        (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n        return;\n    }\n    // --- NEU: Toggle Kritischer Pfad ---\n    if (target.classList.contains(\"critical-path-toggle\")) {\n        team.showCriticalPath = target.checked;\n        (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n        return;\n    }\n    let shouldRecalculate = false;\n    if (target.classList.contains(\"dependency-checkbox\")) {\n        const dropdown = target.closest(\".dependency-dropdown\");\n        const checkedBoxes = dropdown.querySelectorAll(\".dependency-checkbox:checked\");\n        (0, $b0be7539779f7498$export$bf5236ebcba83552)(teamId, taskId, \"dependency\", Array.from(checkedBoxes).map((cb)=>cb.value));\n        shouldRecalculate = true;\n    } else {\n        const key = target.dataset.key;\n        (0, $b0be7539779f7498$export$bf5236ebcba83552)(teamId, taskId, key, target.value);\n        if ([\n            \"duration\",\n            \"plannedEnd\",\n            \"actualEnd\",\n            \"dependency\",\n            \"status\",\n            \"plannedStart\"\n        ].includes(key)) shouldRecalculate = true;\n        // Auto-Set/Unset Actual End on status change\n        if (key === \"status\") {\n            const task = team.tasks.find((t)=>t.taskId === taskId);\n            if (task) {\n                if (target.value === \"Completed\") {\n                    const today = new Date();\n                    const yyyy = today.getUTCFullYear();\n                    const mm = String(today.getUTCMonth() + 1).padStart(2, \"0\");\n                    const dd = String(today.getUTCDate()).padStart(2, \"0\");\n                    task.actualEnd = `${yyyy}-${mm}-${dd}`;\n                } else if (task.actualEnd) task.actualEnd = \"\";\n            }\n        }\n        // Auto-set status when actualEnd changes manually\n        if (key === \"actualEnd\") {\n            const task = team.tasks.find((t)=>t.taskId === taskId);\n            if (task) {\n                if (target.value) task.status = \"Completed\";\n                else if (task.status === \"Completed\") task.status = \"Not Started\";\n            }\n        }\n    }\n    if (shouldRecalculate) (0, $f796a5fd6447bc1a$export$6302a168e58508f7)(teamId);\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n}\nfunction $decb44ba0b4d213b$export$5005ca5a9e9034e6(e) {\n    const target = e.target;\n    const { teamId: teamId, taskId: taskId } = (0, $c7997aef068a9f19$export$f84dd52f254f04e7)(target);\n    if (target.id === \"main-title\" || target.id === \"main-subtitle\") {\n        (0, $b0be7539779f7498$export$b72e390a9ebe1648).config[target.id === \"main-title\" ? \"title\" : \"subtitle\"] = target.textContent;\n        (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n        return;\n    }\n    if (!teamId) return;\n    if (target.classList.contains(\"team-name\")) {\n        const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n        if (team) team.name = target.textContent;\n    } else {\n        const key = target.dataset.key;\n        if (target.tagName === \"TEXTAREA\") {\n            target.style.height = \"auto\";\n            target.style.height = target.scrollHeight + \"px\";\n        }\n        (0, $b0be7539779f7498$export$bf5236ebcba83552)(teamId, taskId, key, target.value);\n    }\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n}\nfunction $decb44ba0b4d213b$export$efb0ff1ec282a4c2(e) {\n    const target = e.target;\n    const { teamId: teamId, taskId: taskId } = (0, $c7997aef068a9f19$export$f84dd52f254f04e7)(target);\n    if (!teamId) return;\n    if (target.closest(\".toggle-collapse-btn\") && !target.closest(\".team-name\")) {\n        const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n        if (team) {\n            team.isCollapsed = !team.isCollapsed;\n            (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n            (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        }\n        return;\n    }\n    if (target.classList.contains(\"gantt-zoom-btn\")) {\n        const direction = target.dataset.ganttZoom;\n        const step = 2, minZoom = 10, maxZoom = 60;\n        let currentZoom = (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings.dayWidth;\n        currentZoom = direction === \"in\" ? Math.min(maxZoom, currentZoom + step) : Math.max(minZoom, currentZoom - step);\n        (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.ganttSettings.dayWidth = currentZoom;\n        (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n        return;\n    }\n    if (target.classList.contains(\"toggle-gantt-btn\")) {\n        const section = document.getElementById(teamId);\n        const ganttWrapper = section.querySelector(\".gantt-wrapper\");\n        const ganttControls = section.querySelector(\".gantt-controls\");\n        const isHidden = ganttWrapper.classList.toggle(\"hidden\");\n        ganttControls.classList.toggle(\"hidden\", isHidden);\n        target.textContent = isHidden ? \"Gantt-Chart anzeigen\" : \"Gantt-Chart verbergen\";\n        return;\n    }\n    if (target.classList.contains(\"dependency-dropdown-button\")) {\n        const panel = target.nextElementSibling;\n        const isVisible = panel.classList.contains(\"visible\");\n        document.querySelectorAll(\".dependency-dropdown-panel.visible\").forEach((p)=>p.classList.remove(\"visible\"));\n        document.querySelectorAll(\".team-section-active\").forEach((s)=>s.classList.remove(\"team-section-active\"));\n        document.querySelectorAll(\".table-container.overflow-visible\").forEach((c)=>c.classList.remove(\"overflow-visible\"));\n        document.querySelectorAll(\".team-content.overflow-visible\").forEach((c)=>c.classList.remove(\"overflow-visible\"));\n        if (!isVisible) {\n            panel.classList.add(\"visible\");\n            const teamSection = target.closest(\".team-section\");\n            teamSection?.classList.add(\"team-section-active\");\n            teamSection?.querySelector(\".team-content\")?.classList.add(\"overflow-visible\");\n            teamSection?.querySelector(\".table-container\")?.classList.add(\"overflow-visible\");\n        }\n    } else if (target.classList.contains(\"add-task-btn\")) $decb44ba0b4d213b$var$addTask(teamId);\n    else if (target.classList.contains(\"delete-task-btn\")) (0, $bfc1bd9ef2af3f3a$export$d59ed8aab1dcc70a)(`M\\xf6chtest du Task ${taskId} wirklich l\\xf6schen?`, ()=>$decb44ba0b4d213b$var$deleteTask(teamId, taskId));\n    else if (target.classList.contains(\"sort-tasks-btn\")) $decb44ba0b4d213b$var$sortTasksByDependency(teamId);\n    else if (target.classList.contains(\"set-team-baseline-btn\")) $decb44ba0b4d213b$var$setBaselineForTeam(teamId);\n    else if (target.classList.contains(\"screenshot-gantt-btn\")) $decb44ba0b4d213b$var$captureGanttScreenshot(teamId, target);\n    else if (target.classList.contains(\"duplicate-team-btn\")) $decb44ba0b4d213b$var$duplicateTeam(teamId);\n    else if (target.classList.contains(\"delete-team-btn\")) $decb44ba0b4d213b$var$deleteTeamWithConfirmation(teamId);\n}\nfunction $decb44ba0b4d213b$export$93a920e9f88fd87f() {\n    const existingIds = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.map((t)=>parseInt(t.id.replace(\"team\", \"\")) || 0);\n    const newId = (existingIds.length > 0 ? Math.max(...existingIds) : 0) + 1;\n    // --- NEU: Standard-Planungsmodus für neue Teams ---\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.push({\n        id: `team${newId}`,\n        name: `Neues Team ${newId}`,\n        tasks: [],\n        lastTaskId: 0,\n        baselines: [],\n        isCollapsed: false,\n        planningMode: \"backward\",\n        delayReference: \"planned\",\n        showCriticalPath: false\n    });\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n}\nfunction $decb44ba0b4d213b$var$duplicateTeam(sourceTeamId) {\n    const source = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === sourceTeamId);\n    if (!source) return;\n    const existingIds = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.map((t)=>parseInt(t.id.replace(\"team\", \"\")) || 0);\n    const newNumericId = (existingIds.length > 0 ? Math.max(...existingIds) : 0) + 1;\n    const newTeamId = `team${newNumericId}`;\n    // Deep copy of tasks and baselines, drop transient fields\n    const cleanTask = (task)=>{\n        const { plannedStart_date: plannedStart_date, plannedEnd_date: plannedEnd_date, actualEnd_date: actualEnd_date, forwardEnd_date: forwardEnd_date, baseline: baseline, cycleError: cycleError, isTerminal: isTerminal, ...rest } = task;\n        // Ensure dependency is a shallow-copied array of strings\n        const dependency = (rest.dependency || []).map((d)=>String(d));\n        return {\n            ...rest,\n            dependency: dependency\n        };\n    };\n    const newTasks = (source.tasks || []).map((t)=>cleanTask({\n            ...t\n        }));\n    const newBaselines = JSON.parse(JSON.stringify(source.baselines || []));\n    const newLastTaskId = newTasks.reduce((m, t)=>Math.max(m, parseInt(t.taskId) || 0), 0);\n    const clone = {\n        id: newTeamId,\n        name: `${source.name} (Kopie)`,\n        tasks: newTasks,\n        baselines: newBaselines,\n        lastTaskId: newLastTaskId,\n        isCollapsed: source.isCollapsed || false,\n        planningMode: source.planningMode || \"backward\",\n        delayReference: source.delayReference || \"planned\",\n        showCriticalPath: source.showCriticalPath || false\n    };\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.push(clone);\n    (0, $f796a5fd6447bc1a$export$6302a168e58508f7)(clone.id);\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n    (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(`Team \"${source.name}\" wurde dupliziert.`);\n}\nfunction $decb44ba0b4d213b$var$addTask(teamId) {\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    team.lastTaskId++;\n    const newTask = {\n        taskId: team.lastTaskId,\n        dependency: []\n    };\n    (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.columns.forEach((col)=>{\n        if (col.default) newTask[col.key] = col.default;\n    });\n    team.tasks.push(newTask);\n    (0, $f796a5fd6447bc1a$export$6302a168e58508f7)(teamId);\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n}\nfunction $decb44ba0b4d213b$var$deleteTask(teamId, taskId) {\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    team.tasks = team.tasks.filter((t)=>t.taskId !== taskId);\n    team.tasks.forEach((task)=>{\n        if (task.dependency?.includes(String(taskId))) task.dependency = task.dependency.filter((depId)=>depId !== String(taskId));\n    });\n    (0, $f796a5fd6447bc1a$export$6302a168e58508f7)(teamId);\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n}\nfunction $decb44ba0b4d213b$var$handleColumnWidthChange(key, newWidth) {\n    const col = (0, $b0be7539779f7498$export$b72e390a9ebe1648).config.columns.find((c)=>c.key === key);\n    if (col) col.width = newWidth;\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n}\nfunction $decb44ba0b4d213b$var$sortTasksByDependency(teamId) {\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    const { sorted: sorted, hasCycle: hasCycle } = (0, $f796a5fd6447bc1a$export$5c0523ec6add5477)(team.tasks);\n    if (hasCycle) {\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Fehler: Ein zirkul\\xe4rer Verweis wurde entdeckt. Bitte die Abh\\xe4ngigkeiten korrigieren.\");\n        return;\n    }\n    team.tasks = sorted.map((id)=>team.tasks.find((t)=>t.taskId === id));\n    (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n}\nfunction $decb44ba0b4d213b$var$setBaselineForTeam(teamId) {\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    (0, $bfc1bd9ef2af3f3a$export$d59ed8aab1dcc70a)(`M\\xf6chten Sie den aktuellen Status f\\xfcr Team \"${team.name}\" als Baseline festlegen? Eine bestehende Baseline f\\xfcr dieses Team wird \\xfcberschrieben.`, ()=>{\n        team.baselines = JSON.parse(JSON.stringify(team.tasks));\n        (0, $f796a5fd6447bc1a$export$6302a168e58508f7)(team.id);\n        (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(`Baseline f\\xfcr Team \"${team.name}\" wurde erfolgreich gesetzt!`);\n    });\n}\nasync function $decb44ba0b4d213b$var$captureGanttScreenshot(teamId, button) {\n    const teamSection = document.getElementById(teamId);\n    const ganttContainer = teamSection?.querySelector(\".gantt-container\");\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!ganttContainer || !team) {\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Fehler: Das Gantt-Chart zum Exportieren wurde nicht gefunden.\");\n        return;\n    }\n    const originalButtonText = button.textContent;\n    button.textContent = \"Exportiere...\";\n    button.disabled = true;\n    const ganttTimeline = ganttContainer.querySelector(\".gantt-timeline\");\n    const timelineHeader = ganttTimeline.querySelector(\".gantt-header-container\");\n    const fullWidth = timelineHeader.scrollWidth;\n    const taskListWidth = ganttContainer.querySelector(\".gantt-tasks\").offsetWidth;\n    const originalContainerStyle = ganttContainer.style.cssText;\n    const originalTimelineStyle = ganttTimeline.style.cssText;\n    ganttContainer.style.width = `${taskListWidth + fullWidth + 10}px`;\n    ganttContainer.style.gridTemplateColumns = `${taskListWidth}px 5px ${fullWidth}px`;\n    ganttTimeline.style.overflowX = \"visible\";\n    try {\n        const canvas = await html2canvas(ganttContainer, {\n            useCORS: true,\n            scale: 2,\n            backgroundColor: \"#ffffff\",\n            width: ganttContainer.scrollWidth,\n            height: ganttContainer.scrollHeight,\n            windowWidth: ganttContainer.scrollWidth,\n            windowHeight: ganttContainer.scrollHeight\n        });\n        const link = document.createElement(\"a\");\n        const teamName = team.name.replace(/\\s+/g, \"_\");\n        link.download = `Gantt-Chart_${teamName}.png`;\n        link.href = canvas.toDataURL(\"image/png\");\n        link.click();\n    } catch (error) {\n        console.error(\"Fehler beim Erstellen des Screenshots:\", error);\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Ein unerwarteter Fehler ist beim Exportieren aufgetreten.\");\n    } finally{\n        button.textContent = originalButtonText;\n        button.disabled = false;\n        ganttContainer.style.cssText = originalContainerStyle;\n        ganttTimeline.style.cssText = originalTimelineStyle;\n    }\n}\nfunction $decb44ba0b4d213b$var$deleteTeamWithConfirmation(teamId) {\n    const team = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.find((t)=>t.id === teamId);\n    if (!team) return;\n    (0, $bfc1bd9ef2af3f3a$export$d59ed8aab1dcc70a)(`M\\xf6chtest du das Team \"${team.name}\" wirklich l\\xf6schen? Diese Aktion kann nicht r\\xfcckg\\xe4ngig gemacht werden.`, ()=>{\n        (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams = (0, $b0be7539779f7498$export$b72e390a9ebe1648).teams.filter((t)=>t.id !== teamId);\n        (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n        (0, $6f43f11e51b5b35f$export$9ad2828a0a3f778)();\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(`Team \"${team.name}\" wurde gel\\xf6scht.`);\n    });\n}\nfunction $decb44ba0b4d213b$export$29f954c931b8b409() {\n    (0, $bfc1bd9ef2af3f3a$export$d59ed8aab1dcc70a)(\"M\\xf6chten Sie wirklich alle lokal gespeicherten Daten l\\xf6schen? Dies kann nicht r\\xfcckg\\xe4ngig gemacht werden und die Seite wird neu geladen.\", ()=>{\n        localStorage.removeItem(\"projectPlannerState_v1\");\n        (0, $bfc1bd9ef2af3f3a$export$e5c6bdc1d9c7bb9e)();\n        (0, $bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7)(\"Lokale Daten wurden gel\\xf6scht. Seite wird neu geladen.\");\n        setTimeout(()=>window.location.reload(), 1500);\n    });\n}\n\n\n\n// --- INITIALIZATION ---\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Globale Event-Listener\n    // Entfernt: json-upload + save-config-btn\n    // Entfernt: csv-upload (wir behalten nur CSV-Export-Button)\n    // document\n    //   .getElementById(\"save-csv-btn\")\n    //   .addEventListener(\"click\", handleSaveToCSV);\n    document.getElementById(\"project-json-upload\").addEventListener(\"change\", (0, $6f43f11e51b5b35f$export$ce766a5fa32b2368));\n    const openBtn = document.getElementById(\"open-project-btn\");\n    if (openBtn) openBtn.addEventListener(\"click\", (0, $6f43f11e51b5b35f$export$fa346957d93536fa));\n    const quickSaveBtn = document.getElementById(\"quick-save-project-btn\");\n    if (quickSaveBtn) quickSaveBtn.addEventListener(\"click\", (0, $6f43f11e51b5b35f$export$fa43b9a89289c997));\n    const saveAsBtn = document.getElementById(\"save-as-project-json-btn\");\n    if (saveAsBtn) saveAsBtn.addEventListener(\"click\", ()=>(0, $6f43f11e51b5b35f$export$45540aa3bfa32b7)());\n    document.getElementById(\"add-team-btn\").addEventListener(\"click\", (0, $decb44ba0b4d213b$export$93a920e9f88fd87f));\n    document.getElementById(\"clear-storage-btn\").addEventListener(\"click\", (0, $decb44ba0b4d213b$export$29f954c931b8b409));\n    document.getElementById(\"dashboard-team-filter\").addEventListener(\"change\", (e)=>(0, $61f6a02d249e0911$export$82bc199367468d80)(e.target.value));\n    // Delegierte Event-Listener für dynamische Inhalte\n    const teamsContainer = document.getElementById(\"project-teams\");\n    teamsContainer.addEventListener(\"change\", (0, $decb44ba0b4d213b$export$2fc9146f71db8986));\n    teamsContainer.addEventListener(\"input\", (0, $decb44ba0b4d213b$export$5005ca5a9e9034e6));\n    teamsContainer.addEventListener(\"click\", (0, $decb44ba0b4d213b$export$efb0ff1ec282a4c2));\n    teamsContainer.addEventListener(\"mousedown\", (0, $ccbcfb0497dcc85a$export$fbf8042ad30617f1));\n    // Listener zum Schließen der Dropdowns\n    document.addEventListener(\"click\", (e)=>{\n        if (!e.target.closest(\".dependency-dropdown\")) {\n            document.querySelectorAll(\".dependency-dropdown-panel.visible\").forEach((panel)=>panel.classList.remove(\"visible\"));\n            document.querySelectorAll(\".team-section-active\").forEach((s)=>s.classList.remove(\"team-section-active\"));\n            document.querySelectorAll(\".table-container.overflow-visible\").forEach((c)=>c.classList.remove(\"overflow-visible\"));\n            // --- FIX: Also remove overflow from team-content ---\n            document.querySelectorAll(\".team-content.overflow-visible\").forEach((c)=>c.classList.remove(\"overflow-visible\"));\n        }\n    });\n    // Keyboard Shortcuts\n    document.addEventListener(\"keydown\", (e)=>{\n        const isMac = navigator.platform.toUpperCase().includes(\"MAC\");\n        const mod = isMac ? e.metaKey : e.ctrlKey;\n        if (!mod) return;\n        if (e.key.toLowerCase() === \"s\" && !e.shiftKey) {\n            e.preventDefault();\n            (0, $6f43f11e51b5b35f$export$fa43b9a89289c997)();\n        } else if (e.key.toLowerCase() === \"s\" && e.shiftKey) {\n            e.preventDefault();\n            (0, $6f43f11e51b5b35f$export$45540aa3bfa32b7)();\n        } else if (e.key.toLowerCase() === \"o\") {\n            e.preventDefault();\n            (0, $6f43f11e51b5b35f$export$fa346957d93536fa)();\n        }\n    });\n    // Drag & Drop zum Öffnen\n    window.addEventListener(\"dragover\", (e)=>{\n        e.preventDefault();\n    });\n    window.addEventListener(\"drop\", async (e)=>{\n        e.preventDefault();\n        const file = e.dataTransfer?.files?.[0];\n        if (!file) return;\n        if (!file.name.toLowerCase().endsWith(\".json\")) return;\n        try {\n            const text = await file.text();\n            (0, $6f43f11e51b5b35f$export$909b5a7846cea973)(text);\n        } catch (err) {\n            console.error(\"Drop load failed\", err);\n        }\n    });\n    // Warnung beim Schließen, falls nicht in Datei gespeichert\n    window.addEventListener(\"beforeunload\", (e)=>{\n        try {\n            if ((0, $6f43f11e51b5b35f$export$2d34fbc2c71a78ff) && (0, $6f43f11e51b5b35f$export$2d34fbc2c71a78ff)()) {\n                e.preventDefault();\n                e.returnValue = \"\";\n            }\n        } catch  {}\n    });\n    // Lade den letzten Zustand oder starte die leere App\n    if (localStorage.getItem(\"projectPlannerState_v1\")) (0, $bfc1bd9ef2af3f3a$export$d59ed8aab1dcc70a)(\"Eine gespeicherte Sitzung wurde gefunden. M\\xf6chten Sie sie wiederherstellen?\", ()=>{\n        if ((0, $b0be7539779f7498$export$6152f1d30eb4c063)()) {\n            (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n            (0, $bfc1bd9ef2af3f3a$export$e5c6bdc1d9c7bb9e)(\"saved\");\n        } else (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    }, ()=>(0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)());\n    else (0, $bfc1bd9ef2af3f3a$export$bd45a425ac802846)();\n    // Set footer copyright text\n    const copyrightEl = document.getElementById(\"copyright-text\");\n    if (copyrightEl) {\n        const year = new Date().getFullYear();\n        copyrightEl.textContent = `Copyright \\xa9 ${year} Daniel Gruner`;\n    }\n});\n\n\n//# sourceMappingURL=projectplanner.0b6eb669.js.map\n","// main.js\r\n// Der Haupteinstiegspunkt der Anwendung. Initialisiert alles und verbindet die Module.\r\nimport { loadStateFromLocalStorage } from \"./scripts/state.js\";\r\nimport { renderApp, showConfirmation, updateSaveStatus } from \"./scripts/ui.js\";\r\nimport { handleGanttResizeStart } from \"./scripts/gantt.js\";\r\nimport {\r\n  handleSaveToCSV,\r\n  handleProjectJsonUpload,\r\n  handleOpenProjectPicker,\r\n  handleQuickSaveProjectJson,\r\n  handleSaveProjectJsonAs,\r\n  loadProjectFromText,\r\n  getDirtySinceFileSave,\r\n} from \"./scripts/file-handler.js\";\r\nimport {\r\n  handleTeamChange,\r\n  handleTeamInput,\r\n  handleTeamClick,\r\n  createNewTeam,\r\n  handleClearStorage,\r\n} from \"./scripts/event-handlers.js\";\r\nimport { renderDashboard } from \"./scripts/dashboard.js\";\r\n\r\n// --- INITIALIZATION ---\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  // Globale Event-Listener\r\n  // Entfernt: json-upload + save-config-btn\r\n  // Entfernt: csv-upload (wir behalten nur CSV-Export-Button)\r\n  // document\r\n  //   .getElementById(\"save-csv-btn\")\r\n  //   .addEventListener(\"click\", handleSaveToCSV);\r\n  document\r\n    .getElementById(\"project-json-upload\")\r\n    .addEventListener(\"change\", handleProjectJsonUpload);\r\n  const openBtn = document.getElementById(\"open-project-btn\");\r\n  if (openBtn) openBtn.addEventListener(\"click\", handleOpenProjectPicker);\r\n  const quickSaveBtn = document.getElementById(\"quick-save-project-btn\");\r\n  if (quickSaveBtn)\r\n    quickSaveBtn.addEventListener(\"click\", handleQuickSaveProjectJson);\r\n  const saveAsBtn = document.getElementById(\"save-as-project-json-btn\");\r\n  if (saveAsBtn)\r\n    saveAsBtn.addEventListener(\"click\", () => handleSaveProjectJsonAs());\r\n  document\r\n    .getElementById(\"add-team-btn\")\r\n    .addEventListener(\"click\", createNewTeam);\r\n  document\r\n    .getElementById(\"clear-storage-btn\")\r\n    .addEventListener(\"click\", handleClearStorage);\r\n  document\r\n    .getElementById(\"dashboard-team-filter\")\r\n    .addEventListener(\"change\", (e) => renderDashboard(e.target.value));\r\n\r\n  // Delegierte Event-Listener für dynamische Inhalte\r\n  const teamsContainer = document.getElementById(\"project-teams\");\r\n  teamsContainer.addEventListener(\"change\", handleTeamChange);\r\n  teamsContainer.addEventListener(\"input\", handleTeamInput);\r\n  teamsContainer.addEventListener(\"click\", handleTeamClick);\r\n  teamsContainer.addEventListener(\"mousedown\", handleGanttResizeStart);\r\n\r\n  // Listener zum Schließen der Dropdowns\r\n  document.addEventListener(\"click\", (e) => {\r\n    if (!e.target.closest(\".dependency-dropdown\")) {\r\n      document\r\n        .querySelectorAll(\".dependency-dropdown-panel.visible\")\r\n        .forEach((panel) => panel.classList.remove(\"visible\"));\r\n      document\r\n        .querySelectorAll(\".team-section-active\")\r\n        .forEach((s) => s.classList.remove(\"team-section-active\"));\r\n      document\r\n        .querySelectorAll(\".table-container.overflow-visible\")\r\n        .forEach((c) => c.classList.remove(\"overflow-visible\"));\r\n      // --- FIX: Also remove overflow from team-content ---\r\n      document\r\n        .querySelectorAll(\".team-content.overflow-visible\")\r\n        .forEach((c) => c.classList.remove(\"overflow-visible\"));\r\n    }\r\n  });\r\n\r\n  // Keyboard Shortcuts\r\n  document.addEventListener(\"keydown\", (e) => {\r\n    const isMac = navigator.platform.toUpperCase().includes(\"MAC\");\r\n    const mod = isMac ? e.metaKey : e.ctrlKey;\r\n    if (!mod) return;\r\n    if (e.key.toLowerCase() === \"s\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleQuickSaveProjectJson();\r\n    } else if (e.key.toLowerCase() === \"s\" && e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSaveProjectJsonAs();\r\n    } else if (e.key.toLowerCase() === \"o\") {\r\n      e.preventDefault();\r\n      handleOpenProjectPicker();\r\n    }\r\n  });\r\n\r\n  // Drag & Drop zum Öffnen\r\n  window.addEventListener(\"dragover\", (e) => {\r\n    e.preventDefault();\r\n  });\r\n  window.addEventListener(\"drop\", async (e) => {\r\n    e.preventDefault();\r\n    const file = e.dataTransfer?.files?.[0];\r\n    if (!file) return;\r\n    if (!file.name.toLowerCase().endsWith(\".json\")) return;\r\n    try {\r\n      const text = await file.text();\r\n      loadProjectFromText(text);\r\n    } catch (err) {\r\n      console.error(\"Drop load failed\", err);\r\n    }\r\n  });\r\n\r\n  // Warnung beim Schließen, falls nicht in Datei gespeichert\r\n  window.addEventListener(\"beforeunload\", (e) => {\r\n    try {\r\n      if (getDirtySinceFileSave && getDirtySinceFileSave()) {\r\n        e.preventDefault();\r\n        e.returnValue = \"\";\r\n      }\r\n    } catch {}\r\n  });\r\n\r\n  // Lade den letzten Zustand oder starte die leere App\r\n  if (localStorage.getItem(\"projectPlannerState_v1\")) {\r\n    showConfirmation(\r\n      \"Eine gespeicherte Sitzung wurde gefunden. Möchten Sie sie wiederherstellen?\",\r\n      () => {\r\n        if (loadStateFromLocalStorage()) {\r\n          renderApp();\r\n          updateSaveStatus(\"saved\");\r\n        } else {\r\n          renderApp();\r\n        }\r\n      },\r\n      () => renderApp()\r\n    );\r\n  } else {\r\n    renderApp();\r\n  }\r\n\r\n  // Set footer copyright text\r\n  const copyrightEl = document.getElementById(\"copyright-text\");\r\n  if (copyrightEl) {\r\n    const year = new Date().getFullYear();\r\n    copyrightEl.textContent = `Copyright © ${year} Daniel Gruner`;\r\n  }\r\n});\r\n","// state.js\r\n// Verwaltet den globalen Anwendungszustand und die Speicherung im localStorage.\r\nimport { calculateAll } from \"./core-logic.js\";\r\nimport { showNotification } from \"./ui.js\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"projectPlannerState_v1\";\r\nlet saveTimeout = null;\r\n\r\nexport let appState = {\r\n  config: {\r\n    title: \"Projektplaner\",\r\n    subtitle: \"Lade deine Konfigurations- und Projektdateien, um zu beginnen.\",\r\n    ganttSettings: { dayWidth: 30, taskColumnWidth: 250 },\r\n    columns: [\r\n      { key: \"taskId\", label: \"ID\", type: \"display\", width: \"w-20\" },\r\n      {\r\n        key: \"taskName\",\r\n        label: \"Task\",\r\n        type: \"textarea\",\r\n        width: \"w-80\",\r\n        placeholder: \"Task name...\",\r\n      },\r\n      {\r\n        key: \"responsible\",\r\n        label: \"Responsible\",\r\n        type: \"text-input\",\r\n        width: \"w-40\",\r\n        placeholder: \"Name...\",\r\n      },\r\n      {\r\n        key: \"comment\",\r\n        label: \"Comment\",\r\n        type: \"textarea\",\r\n        width: \"w-72\",\r\n        placeholder: \"Note...\",\r\n      },\r\n      {\r\n        key: \"dependency\",\r\n        label: \"Dependency\",\r\n        type: \"select-dependency\",\r\n        width: \"w-56\",\r\n      },\r\n      {\r\n        key: \"duration\",\r\n        label: \"Duration (Days)\",\r\n        type: \"number-input\",\r\n        width: \"w-28\",\r\n        min: 0,\r\n        default: 1,\r\n      },\r\n      // --- NEU: Spalte für das geplante Startdatum hinzugefügt ---\r\n      {\r\n        key: \"plannedStart\",\r\n        label: \"Planned Start\",\r\n        type: \"date-input\",\r\n        width: \"w-40\",\r\n      },\r\n      {\r\n        key: \"plannedEnd\",\r\n        label: \"Planned End\",\r\n        type: \"date-input\",\r\n        width: \"w-40\",\r\n      },\r\n      {\r\n        key: \"actualEnd\",\r\n        label: \"Actual End\",\r\n        type: \"date-input\",\r\n        width: \"w-40\",\r\n      },\r\n      {\r\n        key: \"forwardEnd\",\r\n        label: \"New End\",\r\n        type: \"display\",\r\n        width: \"w-40\",\r\n        isBold: true,\r\n      },\r\n      {\r\n        key: \"delay\",\r\n        label: \"Delay (Days)\",\r\n        type: \"display-delay\",\r\n        width: \"w-28\",\r\n        isBold: true,\r\n        isCentered: true,\r\n      },\r\n      {\r\n        key: \"status\",\r\n        label: \"Status\",\r\n        type: \"select-status\",\r\n        width: \"w-40\",\r\n        options: [\"Not Started\", \"Blocked\", \"Completed\"],\r\n      },\r\n    ],\r\n  },\r\n  teams: [],\r\n};\r\n\r\nexport function saveStateToLocalStorage(statusCallback) {\r\n  clearTimeout(saveTimeout);\r\n  if (statusCallback) statusCallback(\"saving\");\r\n\r\n  saveTimeout = setTimeout(() => {\r\n    try {\r\n      // Create a serializable copy, excluding date objects\r\n      const stateToSave = JSON.parse(\r\n        JSON.stringify(appState, (key, value) => {\r\n          if (key.endsWith(\"_date\")) return undefined;\r\n          return value;\r\n        })\r\n      );\r\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(stateToSave));\r\n      if (statusCallback) statusCallback(\"saved\");\r\n    } catch (error) {\r\n      console.error(\"Could not save state to localStorage\", error);\r\n      showNotification(\r\n        \"Fehler: Der Projektstatus konnte nicht lokal gespeichert werden.\"\r\n      );\r\n      if (statusCallback) statusCallback(\"error\");\r\n    }\r\n  }, 500);\r\n}\r\n\r\nexport function loadStateFromLocalStorage() {\r\n  try {\r\n    const savedState = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    if (savedState) {\r\n      const loadedState = JSON.parse(savedState);\r\n      if (!loadedState.config.ganttSettings) {\r\n        loadedState.config.ganttSettings = {\r\n          dayWidth: 30,\r\n          taskColumnWidth: 250,\r\n        };\r\n      }\r\n      appState = loadedState;\r\n      // Ensure new properties exist for backward compatibility.\r\n      appState.teams.forEach((team) => {\r\n        if (!team.baselines || !Array.isArray(team.baselines)) {\r\n          team.baselines = [];\r\n        }\r\n        if (typeof team.isCollapsed !== \"boolean\") {\r\n          team.isCollapsed = false;\r\n        }\r\n        // --- NEU: Standard-Planungsmodus für ältere Speicherstände setzen ---\r\n        if (typeof team.planningMode === \"undefined\") {\r\n          team.planningMode = \"backward\";\r\n        }\r\n        // --- NEU: Standard-Delay-Referenz setzen ---\r\n        if (!team.delayReference) {\r\n          team.delayReference = \"planned\";\r\n        }\r\n      });\r\n      appState.teams.forEach((team) => calculateAll(team.id));\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Could not load state from localStorage\", error);\r\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function updateTaskState(teamId, taskId, key, value) {\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n  if (!team) return;\r\n  const task = team.tasks.find((t) => t.taskId === taskId);\r\n  if (!task) return;\r\n  task[key] = value;\r\n}\r\n\r\nexport function setAppState(newState) {\r\n  appState = newState;\r\n}\r\n","// core-logic.js\n// Enthält die Kernlogik und komplexe Berechnungen wie den kritischen Pfad.\nimport { appState } from \"./state.js\";\nimport {\n  parseDate,\n  subtractWorkDays,\n  addWorkDays,\n  getWorkDayDifference,\n  formatDateForInput,\n} from \"./utils.js\";\n\nexport function calculateAll(teamId) {\n  const team = appState.teams.find((t) => t.id === teamId);\n  if (!team) return;\n\n  const taskMap = new Map(team.tasks.map((t) => [t.taskId, t]));\n  const baselineTaskMap = new Map(\n    (team.baselines || []).map((t) => [t.taskId, t])\n  );\n\n  // --- KORREKTUR: Logik zur Verzugsberechnung wieder hier integriert ---\n  let minBaselineStartDate = null;\n  let minActualStartDate = null;\n\n  // Dates, baselines and data for delay calculation are parsed/prepared for all tasks first\n  team.tasks.forEach((t) => {\n    t.cycleError = false;\n    t.plannedStart_date = parseDate(t.plannedStart);\n    t.plannedEnd_date = parseDate(t.plannedEnd);\n    t.actualEnd_date = parseDate(t.actualEnd);\n\n    const baselineTask = baselineTaskMap.get(t.taskId);\n    t.baseline = baselineTask\n      ? {\n          ...baselineTask,\n          plannedEnd_date: parseDate(baselineTask.plannedEnd),\n        }\n      : null;\n\n    // Gather data for project delay calculation\n    const duration = parseInt(t.duration) || 0;\n    const durationCalc = duration > 0 ? duration - 1 : 0;\n\n    if (t.baseline && t.baseline.plannedEnd_date) {\n      const baselineStartDate = subtractWorkDays(\n        t.baseline.plannedEnd_date,\n        durationCalc\n      );\n      if (!minBaselineStartDate || baselineStartDate < minBaselineStartDate) {\n        minBaselineStartDate = baselineStartDate;\n      }\n    }\n\n    if (t.actualEnd_date) {\n      const actualStartDate = subtractWorkDays(t.actualEnd_date, durationCalc);\n      if (!minActualStartDate || actualStartDate < minActualStartDate) {\n        minActualStartDate = actualStartDate;\n      }\n    }\n  });\n\n  // Calculate final project delay\n  let projectDelay = 0;\n  if (\n    minBaselineStartDate &&\n    minActualStartDate &&\n    minActualStartDate > minBaselineStartDate\n  ) {\n    projectDelay = getWorkDayDifference(\n      minBaselineStartDate,\n      minActualStartDate\n    );\n  }\n  const hasAnyActuals = team.tasks.some((t) => !!t.actualEnd_date);\n  // --- ENDE KORREKTUR ---\n\n  // Identify terminal tasks (tasks that are not a dependency for any other task)\n  const allDependencyIds = new Set();\n  team.tasks.forEach((task) => {\n    (task.dependency || []).forEach((depId) =>\n      allDependencyIds.add(parseInt(depId))\n    );\n  });\n  team.tasks.forEach(\n    (task) => (task.isTerminal = !allDependencyIds.has(task.taskId))\n  );\n\n  // Topological sort is required for both planning modes\n  const { hasCycle, cycleNodes, sorted } = topologicalSort(team.tasks);\n  if (hasCycle) {\n    cycleNodes.forEach((nodeId) => {\n      if (taskMap.has(nodeId)) taskMap.get(nodeId).cycleError = true;\n    });\n    return;\n  }\n\n  // Switch logic based on the selected planning mode\n  if (team.planningMode === \"forward\") {\n    calculateForwardPlan(taskMap, sorted);\n    calculateProgressForecast(team, taskMap, sorted, projectDelay);\n  } else {\n    // 'backward' is the default\n    calculateBackwardPlan(taskMap, sorted);\n    // Nach der reinen Rückwärtsplanung wird eine separate Prognose erstellt,\n    // die den tatsächlichen Fortschritt und den Gesamtprojektverzug berücksichtigt.\n    calculateBackwardForecast(taskMap, sorted, projectDelay, hasAnyActuals);\n  }\n\n  // Status und Verzug für alle Modi aktualisieren\n  updateStatusAndDelay(team, taskMap);\n  team.criticalPath = calculateCriticalPath(team);\n}\n\n// --- KORRIGIERT: Funktion für die Forward-Planung berücksichtigt jetzt \"Actual End\" ---\nfunction calculateForwardPlan(taskMap, sortedTaskIds) {\n  sortedTaskIds.forEach((taskId) => {\n    const task = taskMap.get(taskId);\n    const duration = parseInt(task.duration) || 0;\n    const durationCalc = duration > 0 ? duration - 1 : 0;\n\n    // Hinweis: Im Forward-Modus bleiben geplante Daten unabhängig von Actuals.\n    // Abgeschlossene Aufgaben beeinflussen nur die Prognose, nicht den Plan.\n\n    const anchorStartDate = task.plannedStart_date || null;\n\n    let latestDepEndDate = null;\n    if (task.dependency && task.dependency.length > 0) {\n      task.dependency.forEach((depIdStr) => {\n        const depTask = taskMap.get(parseInt(depIdStr));\n        if (depTask) {\n          // Für den Plan nur geplante Enddaten der Vorgänger verwenden\n          const effectiveDepEndDate = depTask.plannedEnd_date;\n          if (effectiveDepEndDate) {\n            if (!latestDepEndDate || effectiveDepEndDate > latestDepEndDate) {\n              latestDepEndDate = effectiveDepEndDate;\n            }\n          }\n        }\n      });\n    }\n\n    const depDrivenStartDate = latestDepEndDate\n      ? addWorkDays(latestDepEndDate, 1)\n      : null;\n\n    // Effektiver Start: spätestes Datum aus Abhängigkeiten und (optionalem) Anker\n    let effectiveStartDate = null;\n    if (depDrivenStartDate && anchorStartDate) {\n      effectiveStartDate =\n        depDrivenStartDate > anchorStartDate\n          ? depDrivenStartDate\n          : anchorStartDate;\n    } else if (depDrivenStartDate) {\n      effectiveStartDate = depDrivenStartDate;\n    } else if (anchorStartDate) {\n      effectiveStartDate = anchorStartDate;\n    } else {\n      effectiveStartDate = null;\n    }\n\n    task.plannedStart_date = effectiveStartDate;\n\n    // Berechne immer das Enddatum basierend auf dem (potenziell neuen) Startdatum.\n    if (effectiveStartDate) {\n      task.plannedEnd_date = addWorkDays(effectiveStartDate, durationCalc);\n    } else {\n      task.plannedEnd_date = null;\n    }\n  });\n}\n\n// --- ÜBERARBEITET: Reine Rückwärtsberechnung des \"Idealplans\" ---\nfunction calculateBackwardPlan(taskMap, sortedTaskIds) {\n  // Diese Funktion berechnet den \"Idealplan\" basierend auf dem Enddatum der letzten Aufgabe(n).\n  // Sie ignoriert den Fortschritt (actualEnd), um einen reinen, vom Ziel gesteuerten Plan zu erstellen.\n  // Der Fortschritt wird in einem zweiten, separaten Schritt (calculateBackwardForecast) berücksichtigt.\n\n  const successors = new Map();\n  taskMap.forEach((task) => successors.set(task.taskId, []));\n  taskMap.forEach((task) => {\n    (task.dependency || []).forEach((depIdStr) => {\n      const depId = parseInt(depIdStr);\n      if (successors.has(depId)) {\n        successors.get(depId).push(task.taskId);\n      }\n    });\n  });\n\n  // Rückwärtsdurchlauf zur Berechnung des Idealplans\n  for (let i = sortedTaskIds.length - 1; i >= 0; i--) {\n    const taskId = sortedTaskIds[i];\n    const task = taskMap.get(taskId);\n    const duration = parseInt(task.duration) || 0;\n    const durationCalc = duration > 0 ? duration - 1 : 0;\n\n    // Abgeschlossene Aufgaben bleiben im Idealplan unverändert; der Fortschritt beeinflusst nur die Prognose.\n\n    let calculatedEndDate;\n    if (task.isTerminal) {\n      // Für terminale Aufgaben ist das vom Benutzer gesetzte Plandatum der Anker.\n      calculatedEndDate = task.plannedEnd_date;\n    } else {\n      // Das Enddatum einer Aufgabe wird durch den frühesten Start ihrer Nachfolger bestimmt.\n      const taskSuccessors = successors.get(taskId);\n      let minSuccessorStartDate = null;\n      if (taskSuccessors && taskSuccessors.length > 0) {\n        taskSuccessors.forEach((successorId) => {\n          const successorTask = taskMap.get(successorId);\n          if (successorTask && successorTask.plannedStart_date) {\n            if (\n              minSuccessorStartDate === null ||\n              successorTask.plannedStart_date < minSuccessorStartDate\n            ) {\n              minSuccessorStartDate = successorTask.plannedStart_date;\n            }\n          }\n        });\n      }\n\n      if (minSuccessorStartDate) {\n        calculatedEndDate = subtractWorkDays(minSuccessorStartDate, 1);\n      } else {\n        // Eine nicht-terminale Aufgabe MUSS ihr Datum von einem Nachfolger ableiten.\n        // Wenn kein Nachfolger ein Datum hat, kann diese Aufgabe auch keins haben.\n        // Das Beibehalten des alten Datums ist falsch und führt zu Inkonsistenzen.\n        calculatedEndDate = null;\n      }\n    }\n\n    task.plannedEnd_date = calculatedEndDate;\n    if (task.plannedEnd_date) {\n      task.plannedStart_date = subtractWorkDays(\n        task.plannedEnd_date,\n        durationCalc\n      );\n    } else {\n      task.plannedStart_date = null;\n    }\n  }\n}\n\n// --- ÜBERARBEITET: Prognose mit korrekter Unterscheidung von \"Realität\" und \"Plan\" ---\nfunction calculateBackwardForecast(\n  taskMap,\n  sortedTaskIds,\n  projectDelay,\n  hasAnyActuals\n) {\n  // Diese Funktion kombiniert den \"Idealplan\" (plannedEnd) mit der \"Realität\" (actualEnd) und dem Gesamtverzug.\n  // Der Kern der Logik ist die Unterscheidung zwischen Aufgaben, die von einem realen Fortschritt abhängen\n  // (\"reality chain\") und solchen, die das nicht tun (z.B. \"Insel\"-Aufgaben).\n\n  const earliestPossibleEndDates = new Map();\n  const realityChainTasks = new Set(); // Verfolgt alle Tasks, die von einem actualEnd beeinflusst werden\n\n  // Schritt 1: Vorwärtsdurchlauf zur Berechnung der \"Realität\" und Identifikation der \"Realitäts-Kette\"\n  sortedTaskIds.forEach((taskId) => {\n    const task = taskMap.get(taskId);\n    const duration = parseInt(task.duration) || 0;\n    const durationCalc = duration > 0 ? duration - 1 : 0;\n\n    let earliestStartDate;\n\n    if (task.actualEnd_date) {\n      earliestPossibleEndDates.set(taskId, task.actualEnd_date);\n      realityChainTasks.add(taskId); // Diese Aufgabe startet oder erweitert die Realitäts-Kette\n      return;\n    }\n\n    let latestDepEndDate = null;\n    let dependencyInRealityChain = false;\n    if (task.dependency && task.dependency.length > 0) {\n      task.dependency.forEach((depIdStr) => {\n        const depId = parseInt(depIdStr);\n        const depEndDate = earliestPossibleEndDates.get(depId);\n        if (depEndDate) {\n          if (!latestDepEndDate || depEndDate > latestDepEndDate) {\n            latestDepEndDate = depEndDate;\n          }\n          // Prüfen, ob ein Vorgänger Teil der Realitäts-Kette ist\n          if (realityChainTasks.has(depId)) {\n            dependencyInRealityChain = true;\n          }\n        }\n      });\n    }\n\n    if (latestDepEndDate) {\n      earliestStartDate = addWorkDays(latestDepEndDate, 1);\n      // Wenn ein Vorgänger in der Kette ist, wird diese Aufgabe auch Teil davon\n      if (dependencyInRealityChain) {\n        realityChainTasks.add(taskId);\n      }\n    } else {\n      // Aufgaben ohne Vorgänger basieren zunächst auf ihrem Plan\n      earliestStartDate = task.plannedStart_date;\n    }\n\n    if (earliestStartDate) {\n      const earliestEndDate = addWorkDays(earliestStartDate, durationCalc);\n      earliestPossibleEndDates.set(taskId, earliestEndDate);\n    }\n  });\n\n  // Schritt 2: Kombiniere Idealplan, Realität und Projektverzug zur finalen Prognose\n  taskMap.forEach((task) => {\n    if (task.actualEnd_date) {\n      task.forwardEnd_date = task.actualEnd_date;\n      return; // Abgeschlossene Aufgaben sind fix\n    }\n\n    const earliestPossibleDate = earliestPossibleEndDates.get(task.taskId);\n    const isInRealityChain = realityChainTasks.has(task.taskId);\n\n    // FINALE LOGIK: \"Realität schlägt Plan\"\n    if (isInRealityChain) {\n      // Wenn eine Aufgabe von realem Fortschritt abhängt, diktiert dieser die Prognose.\n      task.forwardEnd_date = earliestPossibleDate;\n    } else {\n      // Wenn eine Aufgabe NICHT vom Fortschritt abhängt (wie Task 14),\n      // wird ihre Prognose aus einem stabilen Referenzplan plus dem globalen Projektverzug berechnet.\n      // Bevorzugt die Baseline (falls vorhanden), damit das Verschieben des Ankers den New End nicht verändert.\n      const referencePlannedDate = hasAnyActuals\n        ? task.baseline?.plannedEnd_date || task.plannedEnd_date\n        : task.plannedEnd_date;\n      let shiftedPlannedDate = null;\n      if (referencePlannedDate) {\n        shiftedPlannedDate =\n          projectDelay > 0\n            ? addWorkDays(referencePlannedDate, projectDelay)\n            : referencePlannedDate;\n      }\n      task.forwardEnd_date = shiftedPlannedDate;\n    }\n  });\n}\n\n// Diese Funktion bleibt für die Vorwärtsplanung bestehen ---\nfunction calculateProgressForecast(team, taskMap, sortedTaskIds, projectDelay) {\n  // Diese Funktion berechnet die Prognose ('New End') in zwei Schritten:\n  // 1. Ein reiner Vorwärtsdurchlauf basierend auf der Realität (actualEnd) und Abhängigkeiten.\n  //    Dies ergibt die frühestmögliche Endzeit, die durch den bisherigen Fortschritt erzwungen wird.\n  // 2. Die endgültige Prognose ist das spätere Datum von (berechneter Fortschritt) und (geplantes Ende).\n  //    Dies stellt sicher, dass sowohl reale Verzögerungen als auch geplante Puffer berücksichtigt werden.\n\n  const progressBasedForecasts = new Map();\n\n  sortedTaskIds.forEach((taskId) => {\n    const task = taskMap.get(taskId);\n    const duration = parseInt(task.duration) || 0;\n    const durationCalc = duration > 0 ? duration - 1 : 0;\n\n    // Schritt 1: Berechne die rein auf dem Fortschritt basierende Prognose\n    let progressBasedEndDate;\n\n    if (task.actualEnd_date) {\n      progressBasedEndDate = task.actualEnd_date;\n    } else {\n      let forecastStartDate = null;\n      let isAnchor = true;\n\n      if (task.dependency && task.dependency.length > 0) {\n        let latestDepEndDate = null;\n        task.dependency.forEach((depIdStr) => {\n          const depId = parseInt(depIdStr);\n          const depForecastEndDate = progressBasedForecasts.get(depId);\n          if (depForecastEndDate) {\n            if (!latestDepEndDate || depForecastEndDate > latestDepEndDate) {\n              latestDepEndDate = depForecastEndDate;\n            }\n          }\n        });\n\n        if (latestDepEndDate) {\n          forecastStartDate = addWorkDays(latestDepEndDate, 1);\n          isAnchor = false;\n        }\n      }\n\n      if (!forecastStartDate) {\n        // Für Anker-Aufgaben (ohne Vorgänger) basiert der Fortschritt auf dem Plan\n        forecastStartDate = task.plannedStart_date;\n      }\n\n      if (forecastStartDate) {\n        const effectiveStartDate = isAnchor\n          ? addWorkDays(forecastStartDate, projectDelay)\n          : forecastStartDate;\n        progressBasedEndDate = addWorkDays(effectiveStartDate, durationCalc);\n      } else {\n        progressBasedEndDate = null;\n      }\n    }\n    progressBasedForecasts.set(taskId, progressBasedEndDate);\n  });\n\n  // Schritt 2: Setze die endgültige Prognose\n  taskMap.forEach((task) => {\n    const progressDate = progressBasedForecasts.get(task.taskId);\n    const planDate = task.plannedEnd_date;\n\n    // Verwende die fortschrittsbasierte Prognose direkt; falle auf den Plan zurück, wenn keine berechnet werden konnte\n    if (progressDate) {\n      task.forwardEnd_date = progressDate;\n    } else if (planDate) {\n      task.forwardEnd_date = planDate;\n    } else {\n      task.forwardEnd_date = null;\n    }\n  });\n}\n\nfunction updateStatusAndDelay(team, taskMap) {\n  taskMap.forEach((task) => {\n    const useBaseline = team.delayReference === \"baseline\";\n    const comparisonDate =\n      useBaseline && task.baseline\n        ? task.baseline.plannedEnd_date\n        : task.plannedEnd_date;\n\n    if (comparisonDate && task.forwardEnd_date) {\n      task.delay = getWorkDayDifference(comparisonDate, task.forwardEnd_date);\n    } else {\n      task.delay = null;\n    }\n\n    if (task.status !== \"Blocked\") {\n      task.status = task.actualEnd_date ? \"Completed\" : \"Not Started\";\n    }\n\n    task.plannedStart = formatDateForInput(task.plannedStart_date);\n    task.plannedEnd = formatDateForInput(task.plannedEnd_date);\n    task.forwardEnd = formatDateForInput(task.forwardEnd_date);\n  });\n}\n\nexport function topologicalSort(tasks) {\n  const adj = new Map();\n  const inDegree = new Map();\n  tasks.forEach((task) => {\n    adj.set(task.taskId, []);\n    inDegree.set(task.taskId, 0);\n  });\n  tasks.forEach((task) => {\n    (task.dependency || []).forEach((depIdStr) => {\n      const depId = parseInt(depIdStr);\n      if (adj.has(depId)) {\n        adj.get(depId).push(task.taskId);\n        inDegree.set(task.taskId, (inDegree.get(task.taskId) || 0) + 1);\n      }\n    });\n  });\n  const queue = [];\n  inDegree.forEach((degree, taskId) => {\n    if (degree === 0) queue.push(taskId);\n  });\n  const sorted = [];\n  while (queue.length > 0) {\n    const u = queue.shift();\n    sorted.push(u);\n    (adj.get(u) || []).forEach((v) => {\n      inDegree.set(v, inDegree.get(v) - 1);\n      if (inDegree.get(v) === 0) queue.push(v);\n    });\n  }\n  const hasCycle = sorted.length !== tasks.length;\n  let cycleNodes = [];\n  if (hasCycle) {\n    inDegree.forEach((degree, taskId) => {\n      if (degree > 0) cycleNodes.push(taskId);\n    });\n  }\n  return { sorted, hasCycle, cycleNodes };\n}\n\nfunction calculateCriticalPath(team) {\n  const taskMap = new Map(team.tasks.map((t) => [t.taskId, t]));\n  const criticalPath = new Set();\n  if (team.tasks.length === 0) return criticalPath;\n\n  let latestTask = null;\n  team.tasks.forEach((task) => {\n    if (\n      task.forwardEnd_date &&\n      (!latestTask || task.forwardEnd_date > latestTask.forwardEnd_date)\n    ) {\n      latestTask = task;\n    }\n  });\n\n  if (!latestTask) return criticalPath;\n\n  let currentTask = latestTask;\n  while (currentTask) {\n    criticalPath.add(currentTask.taskId);\n    if (!currentTask.dependency || currentTask.dependency.length === 0) break;\n\n    let criticalPredecessor = null;\n    const currentStartDate = subtractWorkDays(\n      currentTask.forwardEnd_date,\n      (parseInt(currentTask.duration) || 1) - 1\n    );\n\n    currentTask.dependency.forEach((depIdStr) => {\n      const depTask = taskMap.get(parseInt(depIdStr));\n      if (depTask && depTask.forwardEnd_date) {\n        const expectedStartDate = addWorkDays(depTask.forwardEnd_date, 1);\n        if (expectedStartDate.getTime() === currentStartDate.getTime()) {\n          if (\n            !criticalPredecessor ||\n            depTask.forwardEnd_date > criticalPredecessor.forwardEnd_date\n          ) {\n            criticalPredecessor = depTask;\n          }\n        }\n      }\n    });\n    currentTask = criticalPredecessor;\n  }\n  return criticalPath;\n}\n","// utils.js\r\n// Enthält allgemeine Hilfsfunktionen, insbesondere für die Datumsmanipulation.\r\n\r\nexport const dayDiff = (d1, d2) => Math.round((d2 - d1) / (1000 * 60 * 60 * 24));\r\n\r\nexport function parseDate(dateString) {\r\n    if (!dateString || typeof dateString !== 'string') return null;\r\n    // Handle potential timezone offsets by ensuring we parse as UTC\r\n    if (!dateString.includes('T') && !dateString.includes('Z')) {\r\n        dateString += 'T00:00:00Z';\r\n    }\r\n    const date = new Date(dateString);\r\n    if (isNaN(date.getTime())) return null;\r\n    // Return a new Date object representing the UTC date parts\r\n    return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\r\n};\r\n\r\nexport function formatDateForDisplay(date) {\r\n    if (!date || !(date instanceof Date) || isNaN(date)) return '–';\r\n    const day = String(date.getUTCDate()).padStart(2, '0');\r\n    const month = String(date.getUTCMonth() + 1).padStart(2, '0');\r\n    const year = date.getUTCFullYear();\r\n    return `${day}.${month}.${year}`;\r\n}\r\n\r\nexport function formatDateForInput(date) {\r\n    if (!date || !(date instanceof Date) || isNaN(date)) return '';\r\n    return date.toISOString().split('T')[0];\r\n}\r\n\r\nexport function addWorkDays(startDate, days) {\r\n    if (!startDate) return null;\r\n    let date = new Date(startDate.getTime());\r\n    if (days <= 0) return date;\r\n    let addedDays = 0;\r\n    while (addedDays < days) {\r\n        date.setUTCDate(date.getUTCDate() + 1);\r\n        if (date.getUTCDay() !== 0 && date.getUTCDay() !== 6) {\r\n            addedDays++;\r\n        }\r\n    }\r\n    return date;\r\n}\r\n\r\nexport function subtractWorkDays(startDate, days) {\r\n    if (!startDate) return null;\r\n    let date = new Date(startDate.getTime());\r\n    if (days <= 0) return date;\r\n    let subtractedDays = 0;\r\n    while (subtractedDays < days) {\r\n        date.setUTCDate(date.getUTCDate() - 1);\r\n        if (date.getUTCDay() !== 0 && date.getUTCDay() !== 6) {\r\n            subtractedDays++;\r\n        }\r\n    }\r\n    return date;\r\n}\r\n\r\nexport function getWorkDayDifference(d1, d2) {\r\n    if (!d1 || !d2) return 0;\r\n    if (d1.getTime() === d2.getTime()) return 0;\r\n    let diff = 0;\r\n    const start = new Date(Math.min(d1, d2));\r\n    const end = new Date(Math.max(d1, d2));\r\n    const tempDate = new Date(start);\r\n    // Ensure we count workdays inclusively for the range\r\n    while (tempDate <= end) {\r\n        if (tempDate.getUTCDay() !== 0 && tempDate.getUTCDay() !== 6) {\r\n            diff++;\r\n        }\r\n        tempDate.setUTCDate(tempDate.getUTCDate() + 1);\r\n    }\r\n    // Subtract 1 because the difference shouldn't include both start and end day\r\n    diff = Math.max(0, diff - 1); \r\n    return d1 > d2 ? -diff : diff;\r\n}\r\n\r\nexport const getTargetIds = (element) => {\r\n    const row = element.closest('tr');\r\n    const section = element.closest('.team-section');\r\n    return {\r\n        teamId: section ? section.dataset.teamId : null,\r\n        taskId: row ? parseInt(row.dataset.taskId) : null\r\n    };\r\n};\r\n","// ui.js\r\n// Verantwortlich für alle DOM-Manipulationen und das Rendern der UI.\r\nimport { appState } from \"./state.js\";\r\nimport { parseDate, formatDateForDisplay } from \"./utils.js\";\r\nimport { renderGanttChart } from \"./gantt.js\";\r\nimport { renderDashboard, updateDashboardFilter } from \"./dashboard.js\";\r\n\r\nexport function renderApp() {\r\n  const { config, teams } = appState;\r\n  document.getElementById(\"main-title\").textContent = config.title;\r\n  document.getElementById(\"main-subtitle\").textContent = config.subtitle;\r\n\r\n  const teamsContainer = document.getElementById(\"project-teams\");\r\n\r\n  const scrollY = window.scrollY;\r\n  const openGanttCharts = {};\r\n  document.querySelectorAll(\".gantt-wrapper:not(.hidden)\").forEach((el) => {\r\n    openGanttCharts[el.closest(\".team-section\").dataset.teamId] = true;\r\n  });\r\n\r\n  teamsContainer.innerHTML = \"\";\r\n  const initialPrompt = document.getElementById(\"initial-prompt\");\r\n\r\n  if (teams.length === 0) {\r\n    if (initialPrompt) initialPrompt.style.display = \"block\";\r\n    document.getElementById(\"dashboard-container\").classList.add(\"hidden\");\r\n    updateSaveStatus();\r\n  } else {\r\n    if (initialPrompt) initialPrompt.style.display = \"none\";\r\n    document.getElementById(\"dashboard-container\").classList.remove(\"hidden\");\r\n\r\n    updateDashboardFilter();\r\n    renderDashboard(document.getElementById(\"dashboard-team-filter\").value);\r\n\r\n    teams.forEach((team) => {\r\n      const teamEl = renderTeam(team);\r\n      if (openGanttCharts[team.id]) {\r\n        teamEl.querySelector(\".gantt-wrapper\").classList.remove(\"hidden\");\r\n        teamEl.querySelector(\".gantt-controls\").classList.remove(\"hidden\");\r\n        teamEl.querySelector(\".toggle-gantt-btn\").textContent =\r\n          \"Gantt-Chart verbergen\";\r\n      }\r\n      teamsContainer.appendChild(teamEl);\r\n    });\r\n  }\r\n\r\n  window.scrollTo(0, scrollY);\r\n}\r\n\r\nfunction renderTeam(team) {\r\n  const section = document.createElement(\"div\");\r\n  section.id = team.id;\r\n  section.className = \"team-section bg-white shadow-lg rounded-lg p-6\";\r\n  section.dataset.teamId = team.id;\r\n\r\n  const widthOptions = [\r\n    \"w-20\",\r\n    \"w-24\",\r\n    \"w-28\",\r\n    \"w-32\",\r\n    \"w-36\",\r\n    \"w-40\",\r\n    \"w-48\",\r\n    \"w-56\",\r\n    \"w-64\",\r\n    \"w-72\",\r\n    \"w-80\",\r\n    \"w-96\",\r\n  ];\r\n\r\n  // --- GEÄNDERT: Spalten werden basierend auf dem Planungsmodus gefiltert ---\r\n  const visibleColumns = appState.config.columns.filter((col) => {\r\n    if (team.planningMode === \"forward\")\r\n      return col.key !== \"plannedEnd\" || col.type.startsWith(\"display\");\r\n    if (team.planningMode === \"backward\") return col.key !== \"plannedStart\";\r\n    return true;\r\n  });\r\n\r\n  const headerHtml = visibleColumns\r\n    .map((col) => {\r\n      const optionsHtml = widthOptions\r\n        .map(\r\n          (w) =>\r\n            `<option value=\"${w}\" ${\r\n              col.width === w ? \"selected\" : \"\"\r\n            }>${w.replace(\"w-\", \"\")}</option>`\r\n        )\r\n        .join(\"\");\r\n      return `<th class=\"text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${\r\n        col.width || \"\"\r\n      }\" data-key=\"${col.key}\">\r\n                    <div class=\"flex flex-col space-y-1\">\r\n                        <span>${col.label}</span>\r\n                        <select data-column-key=\"${\r\n                          col.key\r\n                        }\" class=\"column-width-select text-black font-normal normal-case p-1 text-xs rounded border bg-gray-100 hover:bg-gray-200\">${optionsHtml}</select>\r\n                    </div>\r\n                </th>`;\r\n    })\r\n    .join(\"\");\r\n\r\n  const dayWidth = appState.config.ganttSettings?.dayWidth || 30;\r\n\r\n  section.innerHTML = `\r\n        <div class=\"team-header flex justify-between items-start mb-4 gap-4 flex-wrap\">\r\n            <div class=\"flex items-center gap-2\">\r\n                <div class=\"flex items-center gap-2 cursor-pointer toggle-collapse-btn\">\r\n                    <svg class=\"w-6 h-6 text-gray-600 transition-transform ${\r\n                      team.isCollapsed ? \"-rotate-90\" : \"\"\r\n                    }\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\r\n                    <h2 contenteditable=\"true\" class=\"team-name text-2xl font-bold text-gray-700 p-2\">${\r\n                      team.name\r\n                    }</h2>\r\n                </div>\r\n                <!-- --- NEU: Dropdown für den Planungsmodus --- -->\r\n                <div class=\"planning-mode-selector ml-4\">\r\n                    <label for=\"planning-mode-${\r\n                      team.id\r\n                    }\" class=\"text-sm font-medium text-gray-700 mr-2\">Planungsmodus:</label>\r\n                    <select id=\"planning-mode-${\r\n                      team.id\r\n                    }\" class=\"planning-mode-select p-2 border rounded-md bg-gray-50\">\r\n                        <option value=\"backward\" ${\r\n                          team.planningMode === \"backward\" ? \"selected\" : \"\"\r\n                        }>Backward</option>\r\n                        <option value=\"forward\" ${\r\n                          team.planningMode === \"forward\" ? \"selected\" : \"\"\r\n                        }>Forward</option>\r\n                    </select>\r\n                </div>\r\n                <!-- --- NEU: Dropdown für die Delay-Referenz --- -->\r\n                <div class=\"delay-reference-selector ml-4\">\r\n                    <label for=\"delay-reference-${\r\n                      team.id\r\n                    }\" class=\"text-sm font-medium text-gray-700 mr-2\">Delay-Referenz:</label>\r\n                    <select id=\"delay-reference-${\r\n                      team.id\r\n                    }\" class=\"delay-reference-select p-2 border rounded-md bg-gray-50\">\r\n                        <option value=\"planned\" ${\r\n                          team.delayReference === \"planned\" ? \"selected\" : \"\"\r\n                        }>Planned</option>\r\n                        <option value=\"baseline\" ${\r\n                          team.delayReference === \"baseline\" ? \"selected\" : \"\"\r\n                        }>Baseline</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div class=\"flex gap-2 flex-wrap justify-end\">\r\n                <button class=\"action-btn duplicate-team-btn bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition\">Team duplizieren</button>\r\n                <button class=\"action-btn set-team-baseline-btn bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition\">Baseline setzen</button>\r\n                <button class=\"action-btn toggle-gantt-btn bg-cyan-600 text-white px-4 py-2 rounded-md hover:bg-cyan-700 transition\">Gantt-Chart anzeigen</button>\r\n                <button class=\"action-btn sort-tasks-btn bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700 transition\">Tasks sortieren</button>\r\n                <button class=\"action-btn delete-team-btn bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition\">Team löschen</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"team-content ${team.isCollapsed ? \"hidden\" : \"\"}\">\r\n            <div class=\"gantt-controls hidden flex flex-wrap items-center gap-x-4 gap-y-2 mb-4 p-3 bg-gray-50 rounded-md border\">\r\n                <label class=\"text-sm font-medium text-gray-700\">Zoom:</label>\r\n                <div class=\"flex items-center gap-2\">\r\n                    <button data-gantt-zoom=\"out\" class=\"gantt-zoom-btn action-btn bg-gray-200 px-2.5 py-1 text-lg font-bold rounded-md hover:bg-gray-300\">-</button>\r\n                    <span class=\"text-sm font-semibold text-gray-700 w-16 text-center\">${dayWidth}px/Tag</span>\r\n                    <button data-gantt-zoom=\"in\" class=\"gantt-zoom-btn action-btn bg-gray-200 px-2.5 py-1 text-lg font-bold rounded-md hover:bg-gray-300\">+</button>\r\n                </div>\r\n                <div class=\"flex items-center gap-2\">\r\n                    <input type=\"checkbox\" class=\"critical-path-toggle\" ${\r\n                      team.showCriticalPath ? \"checked\" : \"\"\r\n                    }>\r\n                    <label class=\"text-sm font-medium text-gray-700 select-none\">Kritischer Pfad</label>\r\n                </div>\r\n                <div class=\"ml-auto\">\r\n                    <button class=\"action-btn screenshot-gantt-btn bg-orange-500 text-white px-4 py-2 rounded-md hover:bg-orange-600 transition text-sm\">Gantt-Chart exportieren</button>\r\n                </div>\r\n            </div>\r\n            <div class=\"gantt-wrapper hidden mb-6\"></div>\r\n            <div class=\"table-container\">\r\n                <table class=\"project-table min-w-full divide-y divide-gray-200\">\r\n                    <thead class=\"bg-gray-50\"><tr>${headerHtml}<th></th></tr></thead>\r\n                    <tbody class=\"bg-white divide-y divide-gray-200\">${team.tasks\r\n                      .map((task) => renderTaskRow(team, task, visibleColumns))\r\n                      .join(\"\")}</tbody>\r\n                </table>\r\n            </div>\r\n            <div class=\"mt-4\"><button class=\"action-btn add-task-btn bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition\">Task hinzufügen +</button></div>\r\n        </div>`;\r\n\r\n  if (team.tasks.length > 0) {\r\n    section.querySelector(\".gantt-wrapper\").appendChild(renderGanttChart(team));\r\n  }\r\n  return section;\r\n}\r\n\r\nfunction renderTaskRow(team, task, visibleColumns) {\r\n  const rowClass = `${task.cycleError ? \"cycle-error\" : \"\"}`;\r\n\r\n  const cells = visibleColumns\r\n    .map((col) => {\r\n      let element = \"\",\r\n        value = task[col.key] || \"\";\r\n      const hasDependencies = task.dependency && task.dependency.length > 0;\r\n\r\n      switch (col.type) {\r\n        case \"text-input\":\r\n          element = `<input type=\"text\" data-key=\"${\r\n            col.key\r\n          }\" value=\"${value}\" placeholder=\"${col.placeholder || \"\"}\">`;\r\n          break;\r\n        case \"textarea\":\r\n          element = `<textarea data-key=\"${col.key}\" rows=\"1\" placeholder=\"${\r\n            col.placeholder || \"\"\r\n          }\">${value}</textarea>`;\r\n          break;\r\n        case \"number-input\":\r\n          element = `<input type=\"number\" data-key=\"${col.key}\" value=\"${\r\n            value || col.default\r\n          }\" min=\"${col.min || 0}\">`;\r\n          break;\r\n        case \"date-input\":\r\n          // --- GEÄNDERT: Logik zur bedingten Anzeige von Start-/Enddatum ---\r\n          let isReadOnly = false;\r\n          if (\r\n            (team.planningMode === \"forward\" &&\r\n              col.key === \"plannedStart\" &&\r\n              hasDependencies) ||\r\n            (team.planningMode === \"backward\" &&\r\n              col.key === \"plannedEnd\" &&\r\n              !task.isTerminal)\r\n          ) {\r\n            isReadOnly = true;\r\n          }\r\n\r\n          if (isReadOnly) {\r\n            element = `<span data-key=\"${col.key}\">${formatDateForDisplay(\r\n              parseDate(task[col.key])\r\n            )}</span>`;\r\n          } else {\r\n            element = `<input type=\"date\" data-key=\"${col.key}\" value=\"${value}\">`;\r\n          }\r\n          break;\r\n        case \"select-dependency\":\r\n          const selectedDeps = task.dependency || [];\r\n          const selectedNames = selectedDeps\r\n            .map((id) =>\r\n              team.tasks.find((t) => t.taskId == id) ? `#${id}` : \"\"\r\n            )\r\n            .filter(Boolean)\r\n            .join(\", \");\r\n          const optionsHtml = team.tasks\r\n            .filter((t) => t.taskId !== task.taskId)\r\n            .map(\r\n              (opt) => `\r\n                    <label class=\"dependency-option\">\r\n                        <input type=\"checkbox\" class=\"dependency-checkbox\" value=\"${\r\n                          opt.taskId\r\n                        }\" ${\r\n                selectedDeps.includes(String(opt.taskId)) ? \"checked\" : \"\"\r\n              }>\r\n                        <span>#${opt.taskId}: ${(opt.taskName || \"\").substring(\r\n                0,\r\n                40\r\n              )}</span>\r\n                    </label>`\r\n            )\r\n            .join(\"\");\r\n          element = `<div class=\"dependency-dropdown\" data-key=\"dependency\"><button type=\"button\" class=\"dependency-dropdown-button w-full border rounded-md p-2 bg-white text-left truncate\">${\r\n            selectedNames || \"Abhängigkeiten wählen...\"\r\n          }</button><div class=\"dependency-dropdown-panel\">${optionsHtml}</div></div>`;\r\n          break;\r\n        case \"select-status\":\r\n          const statusOptions = col.options\r\n            .map(\r\n              (o) =>\r\n                `<option value=\"${o}\" ${\r\n                  value === o ? \"selected\" : \"\"\r\n                }>${o}</option>`\r\n            )\r\n            .join(\"\");\r\n          element = `<select data-key=\"status\">${statusOptions}</select>`;\r\n          break;\r\n        case \"display\":\r\n          let displayValue =\r\n            col.key === \"forwardEnd\" || col.key === \"plannedEnd\"\r\n              ? formatDateForDisplay(parseDate(value))\r\n              : value;\r\n          element = `<span data-key=\"${col.key}\" class=\"${\r\n            col.isBold ? \"font-semibold\" : \"\"\r\n          }\">${displayValue}</span>`;\r\n          break;\r\n        case \"display-delay\":\r\n          const delay = task.delay === null ? \"-\" : task.delay;\r\n          let delayClass = \"\";\r\n          if (typeof task.delay === \"number\") {\r\n            delayClass =\r\n              task.delay < 0\r\n                ? \"delay-negative\"\r\n                : task.delay > 0\r\n                ? \"delay-positive\"\r\n                : \"delay-on-time\";\r\n          }\r\n          element = `<div data-key=\"${col.key}\" class=\"delay text-center font-bold p-2 rounded-md ${delayClass}\">${delay}</div>`;\r\n          break;\r\n      }\r\n      let cellClass = \"\";\r\n      if (col.type === \"select-status\") {\r\n        cellClass =\r\n          {\r\n            \"Not Started\": \"status-not-started\",\r\n            Completed: \"status-completed\",\r\n            Blocked: \"status-blocked\",\r\n          }[task.status] || \"\";\r\n      }\r\n      return `<td class=\"${cellClass}\">${element}</td>`;\r\n    })\r\n    .join(\"\");\r\n\r\n  return `<tr data-task-id=\"${task.taskId}\" class=\"${rowClass}\">${cells}<td><button class=\"delete-task-btn text-red-500 hover:text-red-700 font-bold text-xl\">&times;</button></td></tr>`;\r\n}\r\n\r\nexport function updateSaveStatus(status) {\r\n  const statusText = document.getElementById(\"save-status-text\");\r\n  const statusWarning = document.getElementById(\"save-status-warning\");\r\n  switch (status) {\r\n    case \"saving\":\r\n      statusText.textContent = \"Speichern...\";\r\n      statusText.classList.remove(\"text-green-600\");\r\n      statusWarning.classList.add(\"hidden\");\r\n      break;\r\n    case \"saved\":\r\n      statusText.textContent = \"✓ Alle Änderungen im Browser-Cache gespeichert\";\r\n      statusText.classList.add(\"text-green-600\", \"font-medium\");\r\n      statusWarning.classList.remove(\"hidden\");\r\n      break;\r\n    default:\r\n      statusText.textContent = \"\";\r\n      statusWarning.classList.add(\"hidden\");\r\n  }\r\n}\r\n\r\nexport function showNotification(message) {\r\n  const modal = document.getElementById(\"modal\");\r\n  document.getElementById(\"modal-text\").textContent = message;\r\n  document.getElementById(\"modal-confirm-btn\").style.display = \"block\";\r\n  document.getElementById(\"modal-cancel-btn\").style.display = \"none\";\r\n  modal.classList.add(\"visible\");\r\n  document.getElementById(\"modal-confirm-btn\").onclick = () =>\r\n    modal.classList.remove(\"visible\");\r\n}\r\n\r\nexport function showConfirmation(message, onConfirm, onCancel = () => {}) {\r\n  const modal = document.getElementById(\"modal\");\r\n  document.getElementById(\"modal-text\").textContent = message;\r\n  document.getElementById(\"modal-confirm-btn\").style.display = \"block\";\r\n  document.getElementById(\"modal-cancel-btn\").style.display = \"block\";\r\n  modal.classList.add(\"visible\");\r\n  document.getElementById(\"modal-confirm-btn\").onclick = () => {\r\n    modal.classList.remove(\"visible\");\r\n    onConfirm();\r\n  };\r\n  document.getElementById(\"modal-cancel-btn\").onclick = () => {\r\n    modal.classList.remove(\"visible\");\r\n    onCancel();\r\n  };\r\n}\r\n","// gantt.js\r\n// Logik für das Rendern und die Interaktion mit dem Gantt-Diagramm.\r\nimport { appState, saveStateToLocalStorage } from \"./state.js\";\r\nimport { subtractWorkDays, dayDiff, parseDate } from \"./utils.js\";\r\nimport { updateSaveStatus } from \"./ui.js\";\r\n\r\nexport function renderGanttChart(team) {\r\n  const ganttElement = document.createElement(\"div\");\r\n  if (!team.tasks || team.tasks.length === 0) return ganttElement;\r\n\r\n  const tasks = team.tasks;\r\n  const DAY_WIDTH = appState.config.ganttSettings?.dayWidth || 30;\r\n  const TASK_COL_WIDTH = appState.config.ganttSettings?.taskColumnWidth || 250;\r\n\r\n  let minDate = null,\r\n    maxDate = null;\r\n\r\n  tasks.forEach((task) => {\r\n    // berücksichtige Prognose-Ende\r\n    if (task.forwardEnd_date) {\r\n      const duration = parseInt(task.duration) || 1;\r\n      const startDate = subtractWorkDays(\r\n        task.forwardEnd_date,\r\n        duration > 0 ? duration - 1 : 0\r\n      );\r\n      if (!minDate || startDate < minDate) minDate = startDate;\r\n      if (!maxDate || task.forwardEnd_date > maxDate)\r\n        maxDate = task.forwardEnd_date;\r\n    }\r\n\r\n    // berücksichtige grauen Referenzbalken je nach delayReference\r\n    if (team.delayReference === \"baseline\") {\r\n      if (task.baseline && task.baseline.plannedEnd_date) {\r\n        const baselineDuration = parseInt(task.baseline.duration) || 1;\r\n        const baselineStartDate = subtractWorkDays(\r\n          task.baseline.plannedEnd_date,\r\n          baselineDuration > 0 ? baselineDuration - 1 : 0\r\n        );\r\n        if (!minDate || baselineStartDate < minDate)\r\n          minDate = baselineStartDate;\r\n        if (!maxDate || task.baseline.plannedEnd_date > maxDate)\r\n          maxDate = task.baseline.plannedEnd_date;\r\n      }\r\n    } else {\r\n      // planned\r\n      if (task.plannedEnd_date) {\r\n        const plannedDuration = parseInt(task.duration) || 1;\r\n        const plannedStartDate = subtractWorkDays(\r\n          task.plannedEnd_date,\r\n          plannedDuration > 0 ? plannedDuration - 1 : 0\r\n        );\r\n        if (!minDate || plannedStartDate < minDate) minDate = plannedStartDate;\r\n        if (!maxDate || task.plannedEnd_date > maxDate)\r\n          maxDate = task.plannedEnd_date;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (!minDate || !maxDate) {\r\n    ganttElement.innerHTML =\r\n      '<p class=\"text-center text-gray-500 p-4\">Keine gültigen Daten für das Gantt-Diagramm vorhanden.</p>';\r\n    return ganttElement;\r\n  }\r\n\r\n  const projectStart = new Date(minDate);\r\n  projectStart.setUTCDate(projectStart.getUTCDate() - 5);\r\n  const projectEnd = new Date(maxDate);\r\n  projectEnd.setUTCDate(projectEnd.getUTCDate() + 5);\r\n\r\n  let monthsHeader = \"\",\r\n    daysHeader = \"\",\r\n    gridRows = \"\",\r\n    weekendColumns = \"\";\r\n  const tempDate = new Date(projectStart);\r\n  let totalDays = 0;\r\n  let currentMonth = -1,\r\n    monthDayCount = 0;\r\n  const monthNames = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mär\",\r\n    \"Apr\",\r\n    \"Mai\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Okt\",\r\n    \"Nov\",\r\n    \"Dez\",\r\n  ];\r\n  const dayFontSize = DAY_WIDTH < 25 ? \"0.65rem\" : \"0.75rem\";\r\n  const monthFontSize = DAY_WIDTH < 25 ? \"0.7rem\" : \"0.8rem\";\r\n\r\n  while (tempDate <= projectEnd) {\r\n    const day = tempDate.getUTCDate(),\r\n      month = tempDate.getUTCMonth();\r\n    const isWeekend = [0, 6].includes(tempDate.getUTCDay());\r\n\r\n    if (month !== currentMonth) {\r\n      if (currentMonth !== -1) {\r\n        monthsHeader += `<div class=\"gantt-month\" style=\"width: ${\r\n          monthDayCount * DAY_WIDTH\r\n        }px; font-size: ${monthFontSize};\">${\r\n          monthNames[currentMonth]\r\n        } ${tempDate.getFullYear()}</div>`;\r\n      }\r\n      currentMonth = month;\r\n      monthDayCount = 0;\r\n    }\r\n    monthDayCount++;\r\n\r\n    daysHeader += `<div class=\"gantt-day ${\r\n      isWeekend ? \"weekend\" : \"\"\r\n    }\" style=\"width: ${DAY_WIDTH}px; font-size: ${dayFontSize};\">${day}</div>`;\r\n    if (isWeekend) {\r\n      weekendColumns += `<div class=\"gantt-weekend-col\" style=\"left: ${\r\n        dayDiff(projectStart, tempDate) * DAY_WIDTH\r\n      }px; width: ${DAY_WIDTH}px;\"></div>`;\r\n    }\r\n    tempDate.setUTCDate(tempDate.getUTCDate() + 1);\r\n    totalDays++;\r\n  }\r\n  monthsHeader += `<div class=\"gantt-month\" style=\"width: ${\r\n    monthDayCount * DAY_WIDTH\r\n  }px; font-size: ${monthFontSize};\">${\r\n    monthNames[currentMonth]\r\n  } ${projectEnd.getFullYear()}</div>`;\r\n  const totalTimelineWidth = totalDays * DAY_WIDTH;\r\n\r\n  tasks.forEach(\r\n    () =>\r\n      (gridRows += `<div class=\"gantt-row\" style=\"width: ${totalTimelineWidth}px\"></div>`)\r\n  );\r\n\r\n  const today = new Date();\r\n  today.setUTCHours(0, 0, 0, 0);\r\n  const todayOffset = dayDiff(projectStart, today) * DAY_WIDTH;\r\n  const todayMarker =\r\n    today >= projectStart && today <= projectEnd\r\n      ? `<div class=\"gantt-today-marker\" style=\"left: ${todayOffset}px;\"></div>`\r\n      : \"\";\r\n\r\n  const bars = tasks\r\n    .map((task, index) => {\r\n      let barHtml = \"\";\r\n      const topPosition = index * 37;\r\n\r\n      // Render grauer Referenzbalken je nach delayReference\r\n      if (team.delayReference === \"baseline\") {\r\n        if (task.baseline && task.baseline.plannedEnd_date) {\r\n          const baselineDuration = parseInt(task.baseline.duration) || 1;\r\n          const baselineStartDate = subtractWorkDays(\r\n            task.baseline.plannedEnd_date,\r\n            baselineDuration > 0 ? baselineDuration - 1 : 0\r\n          );\r\n          const baselineCalendarDays =\r\n            dayDiff(baselineStartDate, task.baseline.plannedEnd_date) + 1;\r\n          const baselineOffset =\r\n            dayDiff(projectStart, baselineStartDate) * DAY_WIDTH;\r\n          const baselineWidth = baselineCalendarDays * DAY_WIDTH;\r\n          barHtml += `<div class=\"gantt-bar-baseline\" style=\"top: ${topPosition}px; left: ${baselineOffset}px; width: ${baselineWidth}px;\" title=\"Baseline End: ${task.baseline.plannedEnd}\"></div>`;\r\n        }\r\n      } else {\r\n        // planned\r\n        if (task.plannedEnd_date) {\r\n          const plannedDuration = parseInt(task.duration) || 1;\r\n          const plannedStartDate = subtractWorkDays(\r\n            task.plannedEnd_date,\r\n            plannedDuration > 0 ? plannedDuration - 1 : 0\r\n          );\r\n          const plannedCalendarDays =\r\n            dayDiff(plannedStartDate, task.plannedEnd_date) + 1;\r\n          const plannedOffset =\r\n            dayDiff(projectStart, plannedStartDate) * DAY_WIDTH;\r\n          const plannedWidth = plannedCalendarDays * DAY_WIDTH;\r\n          barHtml += `<div class=\"gantt-bar-baseline\" style=\"top: ${topPosition}px; left: ${plannedOffset}px; width: ${plannedWidth}px;\" title=\"Planned End: ${task.plannedEnd}\"></div>`;\r\n        }\r\n      }\r\n\r\n      // Render main task bar\r\n      if (task.forwardEnd_date) {\r\n        const duration = parseInt(task.duration) || 1;\r\n        const startDate = subtractWorkDays(\r\n          task.forwardEnd_date,\r\n          duration > 0 ? duration - 1 : 0\r\n        );\r\n        const calendarDays = dayDiff(startDate, task.forwardEnd_date) + 1;\r\n        const width = calendarDays * DAY_WIDTH;\r\n        const offset = dayDiff(projectStart, startDate) * DAY_WIDTH;\r\n\r\n        const statusClass =\r\n          task.status === \"Completed\"\r\n            ? \"status-completed\"\r\n            : task.status === \"Blocked\"\r\n            ? \"status-blocked\"\r\n            : \"\";\r\n        const showCriticalPath = !!team.showCriticalPath;\r\n        const isCritical =\r\n          team.criticalPath && team.criticalPath.has(task.taskId);\r\n        const critClass = showCriticalPath\r\n          ? isCritical\r\n            ? \"is-critical\"\r\n            : \"dimmed\"\r\n          : \"\";\r\n        const fullLabel = `#${task.taskId}: ${task.taskName || \"\"}`;\r\n\r\n        barHtml += `<div class=\"gantt-bar ${statusClass} ${critClass}\" style=\"top: ${topPosition}px; left: ${offset}px; width: ${width}px;\" title=\"${fullLabel}\">\r\n                            <span><strong class=\"mr-1\">#${\r\n                              task.taskId\r\n                            }</strong>${task.taskName || \"\"}</span>\r\n                       </div>`;\r\n      }\r\n\r\n      return barHtml;\r\n    })\r\n    .join(\"\");\r\n\r\n  const taskNames = tasks\r\n    .map(\r\n      (task) =>\r\n        `<div class=\"gantt-task-name\" title=\"${task.taskName}\">#${\r\n          task.taskId\r\n        }: ${task.taskName || \"\"}</div>`\r\n    )\r\n    .join(\"\");\r\n  const headerSpacer = `<div style=\"background-color: #f9fafb; visibility: hidden;\"><div class=\"gantt-header\"><div class=\"gantt-month\">&nbsp;</div></div><div class=\"gantt-days\"><div class=\"gantt-day\">&nbsp;</div></div></div>`;\r\n\r\n  ganttElement.className = \"gantt-container\";\r\n  ganttElement.style.gridTemplateColumns = `${TASK_COL_WIDTH}px 5px 1fr`;\r\n  ganttElement.innerHTML = `\r\n        <div class=\"gantt-tasks\">${headerSpacer}${taskNames}</div>\r\n        <div class=\"gantt-resizer\"></div>\r\n        <div class=\"gantt-timeline\">\r\n            <div class=\"gantt-header-container\" style=\"width: ${totalTimelineWidth}px\">\r\n                <div class=\"gantt-header\">${monthsHeader}</div>\r\n                <div class=\"gantt-days\">${daysHeader}</div>\r\n            </div>\r\n            <div class=\"gantt-rows\" style=\"width: ${totalTimelineWidth}px\">${weekendColumns}${gridRows}${bars}</div>\r\n            ${todayMarker}\r\n        </div>`;\r\n  return ganttElement;\r\n}\r\n\r\nexport function handleGanttResizeStart(e) {\r\n  if (!e.target.classList.contains(\"gantt-resizer\")) return;\r\n  e.preventDefault();\r\n\r\n  const resizer = e.target;\r\n  const ganttContainer = resizer.closest(\".gantt-container\");\r\n  const tasksColumn = ganttContainer.querySelector(\".gantt-tasks\");\r\n  const startX = e.clientX;\r\n  const startWidth = tasksColumn.offsetWidth;\r\n\r\n  const doDrag = (moveEvent) => {\r\n    const newWidth = startWidth + (moveEvent.clientX - startX);\r\n    if (newWidth > 150 && newWidth < 800) {\r\n      ganttContainer.style.gridTemplateColumns = `${newWidth}px 5px 1fr`;\r\n    }\r\n  };\r\n\r\n  const stopDrag = () => {\r\n    document.removeEventListener(\"mousemove\", doDrag);\r\n    document.removeEventListener(\"mouseup\", stopDrag);\r\n\r\n    appState.config.ganttSettings.taskColumnWidth = tasksColumn.offsetWidth;\r\n    saveStateToLocalStorage(updateSaveStatus);\r\n  };\r\n\r\n  document.addEventListener(\"mousemove\", doDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n","// dashboard.js\r\n// Logik für das Rendern und Aktualisieren des Projekt-Dashboards.\r\nimport { appState } from './state.js';\r\nimport { formatDateForDisplay } from './utils.js';\r\n\r\nlet statusChart = null;\r\n\r\n/**\r\n * Renders the entire dashboard based on the selected team filter.\r\n * @param {string} teamId - The ID of the team to filter by, or 'all' for the whole project.\r\n */\r\nexport function renderDashboard(teamId = 'all') {\r\n    const metricsContainer = document.getElementById('dashboard-metrics');\r\n    if (!metricsContainer) return;\r\n\r\n    const tasks = getFilteredTasks(teamId);\r\n\r\n    if (tasks.length === 0) {\r\n        metricsContainer.innerHTML = '<p class=\"col-span-full text-center text-gray-500\">Keine Daten für das Dashboard verfügbar.</p>';\r\n        if (statusChart) {\r\n            statusChart.destroy();\r\n            statusChart = null;\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Calculate KPIs\r\n    const { endDate, totalDelay, completionPercentage, statusCounts } = calculateKPIs(tasks);\r\n\r\n    // Render KPI Cards\r\n    metricsContainer.innerHTML = `\r\n        <div class=\"kpi-card\">\r\n            <span class=\"kpi-title\">Projekt-Enddatum</span>\r\n            <span class=\"kpi-value\">${formatDateForDisplay(endDate)}</span>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n            <span class=\"kpi-title\">Maximaler Verzug (Tage)</span>\r\n            <span class=\"kpi-value ${totalDelay > 0 ? 'text-red-600' : 'text-gray-800'}\">${totalDelay}</span>\r\n        </div>\r\n        <div class=\"kpi-card\">\r\n            <span class=\"kpi-title\">Abgeschlossen</span>\r\n            <span class=\"kpi-value text-green-600\">${completionPercentage}%</span>\r\n        </div>\r\n        <div class=\"kpi-card kpi-chart-container\">\r\n            <canvas id=\"status-chart\"></canvas>\r\n        </div>\r\n    `;\r\n\r\n    // Render Chart\r\n    renderStatusChart(statusCounts);\r\n}\r\n\r\n/**\r\n * Calculates key performance indicators from a list of tasks.\r\n * @param {Array<Object>} tasks - The list of tasks to analyze.\r\n * @returns {Object} An object containing the calculated KPIs.\r\n */\r\nfunction calculateKPIs(tasks) {\r\n    let endDate = null;\r\n    let totalDelay = 0;\r\n    let completedCount = 0;\r\n    const statusCounts = { 'Completed': 0, 'Blocked': 0, 'Not Started': 0 };\r\n\r\n    tasks.forEach(task => {\r\n        // Find the latest end date\r\n        if (task.forwardEnd_date && (!endDate || task.forwardEnd_date > endDate)) {\r\n            endDate = task.forwardEnd_date;\r\n        }\r\n\r\n        // Find the maximum positive delay\r\n        if (task.delay > totalDelay) {\r\n            totalDelay = task.delay;\r\n        }\r\n\r\n        // Count statuses\r\n        if (task.status === 'Completed') {\r\n            completedCount++;\r\n        }\r\n        if (statusCounts[task.status] !== undefined) {\r\n            statusCounts[task.status]++;\r\n        } else {\r\n            // Handle potentially undefined statuses gracefully\r\n            statusCounts['Not Started']++;\r\n        }\r\n    });\r\n\r\n    const completionPercentage = tasks.length > 0 ? Math.round((completedCount / tasks.length) * 100) : 0;\r\n\r\n    return { endDate, totalDelay, completionPercentage, statusCounts };\r\n}\r\n\r\n/**\r\n * Renders or updates the status distribution pie chart.\r\n * @param {Object} statusCounts - An object with counts for each status.\r\n */\r\nfunction renderStatusChart(statusCounts) {\r\n    const ctx = document.getElementById('status-chart')?.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // --- FIX ---\r\n    // Destroy the previous chart instance before creating a new one\r\n    // to prevent rendering issues and memory leaks.\r\n    if (statusChart) {\r\n        statusChart.destroy();\r\n        statusChart = null;\r\n    }\r\n\r\n    const data = {\r\n        labels: ['Abgeschlossen', 'Blockiert', 'Nicht begonnen'],\r\n        datasets: [{\r\n            data: [\r\n                statusCounts['Completed'],\r\n                statusCounts['Blocked'],\r\n                statusCounts['Not Started']\r\n            ],\r\n            backgroundColor: [\r\n                '#10B981', // green-500\r\n                '#F59E0B', // amber-500\r\n                '#6B7280'  // gray-500\r\n            ],\r\n            borderColor: '#ffffff',\r\n            borderWidth: 2,\r\n            hoverOffset: 4\r\n        }]\r\n    };\r\n\r\n    statusChart = new Chart(ctx, {\r\n        type: 'doughnut',\r\n        data: data,\r\n        options: {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n                legend: {\r\n                    position: 'top',\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Aufgaben nach Status'\r\n                }\r\n            }\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the team filter dropdown with the current teams.\r\n */\r\nexport function updateDashboardFilter() {\r\n    const filter = document.getElementById('dashboard-team-filter');\r\n    if (!filter) return;\r\n\r\n    const selectedValue = filter.value;\r\n    filter.innerHTML = '<option value=\"all\">Gesamtes Projekt</option>';\r\n    appState.teams.forEach(team => {\r\n        const option = document.createElement('option');\r\n        option.value = team.id;\r\n        option.textContent = team.name;\r\n        filter.appendChild(option);\r\n    });\r\n    // Try to preserve selection, default to 'all' if team was deleted\r\n    if (appState.teams.some(t => t.id === selectedValue)) {\r\n        filter.value = selectedValue;\r\n    } else {\r\n        filter.value = 'all';\r\n    }\r\n}\r\n\r\n/**\r\n * Gets tasks based on the currently selected filter.\r\n * @param {string} teamId - The ID of the team to filter by, or 'all'.\r\n * @returns {Array<Object>} The filtered list of tasks.\r\n */\r\nfunction getFilteredTasks(teamId) {\r\n    if (teamId === 'all') {\r\n        return appState.teams.flatMap(team => team.tasks);\r\n    }\r\n    const selectedTeam = appState.teams.find(team => team.id === teamId);\r\n    return selectedTeam ? selectedTeam.tasks : [];\r\n}\r\n","// file-handler.js\r\n// Kümmert sich um das Laden und Speichern von Projektdateien (JSON) und optional CSV-Export.\r\nimport { appState, saveStateToLocalStorage } from \"./state.js\";\r\nimport { renderApp, showNotification, updateSaveStatus } from \"./ui.js\";\r\nimport { calculateAll } from \"./core-logic.js\";\r\n\r\n// Entfernt: handleConfigUpload, handleSaveToConfig, handleProjectUpload\r\n\r\n// --- Datei-Kontext & Dirty-Tracking ---\r\nlet currentProjectHandle = null;\r\nlet dirtySinceFileSave = false;\r\n\r\nexport function markDirty() {\r\n  dirtySinceFileSave = true;\r\n}\r\n\r\nexport function getDirtySinceFileSave() {\r\n  return dirtySinceFileSave;\r\n}\r\n\r\nexport function saveAndMarkDirty() {\r\n  markDirty();\r\n  saveStateToLocalStorage(updateSaveStatus);\r\n}\r\n\r\nfunction serializeProjectData() {\r\n  if (!appState) return \"{}\";\r\n\r\n  // Titel/Untertitel und Spaltenbreite aktualisieren wie bei der Konfig-Speicherung\r\n  appState.config.title = document.getElementById(\"main-title\").textContent;\r\n  appState.config.subtitle =\r\n    document.getElementById(\"main-subtitle\").textContent;\r\n  const visibleGanttTasks = document.querySelector(\r\n    \".gantt-wrapper:not(.hidden) .gantt-tasks\"\r\n  );\r\n  if (visibleGanttTasks && visibleGanttTasks.offsetWidth > 0) {\r\n    appState.config.ganttSettings.taskColumnWidth =\r\n      visibleGanttTasks.offsetWidth;\r\n  }\r\n\r\n  // Hilfsfunktionen für Ankerlogik\r\n  const isSourceTask = (task) =>\r\n    !task.dependency || task.dependency.length === 0;\r\n  const buildDependencySet = (tasks) => {\r\n    const s = new Set();\r\n    tasks.forEach((t) =>\r\n      (t.dependency || []).forEach((d) => s.add(parseInt(d)))\r\n    );\r\n    return s;\r\n  };\r\n\r\n  const compactTeams = appState.teams.map((team) => {\r\n    const depSet = buildDependencySet(team.tasks || []);\r\n    const compactTasks = (team.tasks || []).map((task) => {\r\n      const isTerminal = !depSet.has(task.taskId);\r\n      const isSource = isSourceTask(task);\r\n      const compact = { taskId: task.taskId };\r\n\r\n      // Pflichtfelder\r\n      compact.duration = task.duration;\r\n\r\n      // Freitextfelder nur wenn nicht leer\r\n      if (task.taskName) compact.taskName = task.taskName;\r\n      if (task.responsible) compact.responsible = task.responsible;\r\n      if (task.comment) compact.comment = task.comment;\r\n\r\n      // Abhängigkeiten nur wenn vorhanden\r\n      if (task.dependency && task.dependency.length > 0)\r\n        compact.dependency = task.dependency;\r\n\r\n      // Ankerdaten je Modus speichern\r\n      if (team.planningMode === \"backward\") {\r\n        if (isTerminal && task.plannedEnd) compact.plannedEnd = task.plannedEnd;\r\n      } else {\r\n        if (isSource && task.plannedStart)\r\n          compact.plannedStart = task.plannedStart;\r\n      }\r\n\r\n      // Actuals\r\n      if (task.actualEnd) compact.actualEnd = task.actualEnd;\r\n\r\n      // Status nur wenn \"Blocked\" (sonst abgeleitet)\r\n      if (task.status === \"Blocked\") compact.status = \"Blocked\";\r\n\r\n      return compact;\r\n    });\r\n\r\n    // Baseline minimal: geplantes Ende und Dauer (Start ist ableitbar)\r\n    const compactBaselines = (team.baselines || []).map((b) => {\r\n      const base = { taskId: b.taskId };\r\n      if (b.plannedEnd) base.plannedEnd = b.plannedEnd;\r\n      if (b.duration) base.duration = b.duration;\r\n      return base;\r\n    });\r\n\r\n    return {\r\n      id: team.id,\r\n      name: team.name,\r\n      planningMode: team.planningMode || \"backward\",\r\n      delayReference: team.delayReference || \"planned\",\r\n      isCollapsed: !!team.isCollapsed,\r\n      lastTaskId:\r\n        team.lastTaskId ||\r\n        team.tasks?.reduce((m, t) => Math.max(m, parseInt(t.taskId) || 0), 0) ||\r\n        0,\r\n      tasks: compactTasks,\r\n      baselines: compactBaselines,\r\n    };\r\n  });\r\n\r\n  const projectData = { config: appState.config, teams: compactTeams };\r\n  const serialized = JSON.stringify(\r\n    projectData,\r\n    (key, value) => {\r\n      // Entferne transiente Felder (z.B. *_date)\r\n      if (typeof key === \"string\" && key.endsWith(\"_date\")) return undefined;\r\n      return value;\r\n    },\r\n    2\r\n  );\r\n\r\n  return serialized;\r\n}\r\n\r\nfunction loadProjectFromObject(loaded) {\r\n  // Unterstütze sowohl {config, teams} als auch direkte appState-Form\r\n  const config = loaded.config || loaded?.appState?.config;\r\n  const teams = loaded.teams || loaded?.appState?.teams;\r\n  if (!config || !Array.isArray(config.columns) || !Array.isArray(teams)) {\r\n    showNotification(\"Ungültige Projektdatei. Erwartet { config, teams }.\");\r\n    return false;\r\n  }\r\n\r\n  // Merge Gantt-Einstellungen behutsam\r\n  config.ganttSettings = {\r\n    ...appState.config.ganttSettings,\r\n    ...config.ganttSettings,\r\n  };\r\n\r\n  appState.config = config;\r\n  appState.teams = teams;\r\n\r\n  // Backward-Kompatibilität und Defaults\r\n  appState.teams.forEach((team) => {\r\n    if (!team.baselines || !Array.isArray(team.baselines)) team.baselines = [];\r\n    if (typeof team.isCollapsed !== \"boolean\") team.isCollapsed = false;\r\n    if (typeof team.planningMode === \"undefined\")\r\n      team.planningMode = \"backward\";\r\n    if (!team.delayReference) team.delayReference = \"planned\";\r\n    if (!team.lastTaskId) {\r\n      team.lastTaskId =\r\n        team.tasks?.reduce((m, t) => Math.max(m, parseInt(t.taskId) || 0), 0) ||\r\n        0;\r\n    }\r\n  });\r\n\r\n  appState.teams.forEach((team) => calculateAll(team.id));\r\n  renderApp();\r\n  saveStateToLocalStorage(null);\r\n  showNotification(\"Projektdatei erfolgreich geladen!\");\r\n  return true;\r\n}\r\n\r\nexport function loadProjectFromText(text) {\r\n  try {\r\n    const loaded = JSON.parse(text);\r\n    const ok = loadProjectFromObject(loaded);\r\n    if (ok) {\r\n      currentProjectHandle = null;\r\n      dirtySinceFileSave = false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Projekt-JSON Parse Error:\", error);\r\n    showNotification(\"Ein Fehler ist beim Laden der Projektdatei aufgetreten.\");\r\n  }\r\n}\r\n\r\nfunction supportsFSAccess() {\r\n  return (\r\n    window.isSecureContext &&\r\n    typeof window.showOpenFilePicker === \"function\" &&\r\n    typeof window.showSaveFilePicker === \"function\"\r\n  );\r\n}\r\n\r\nasync function verifyPermission(fileHandle, readWrite) {\r\n  const opts = { mode: readWrite ? \"readwrite\" : \"read\" };\r\n  if ((await fileHandle.queryPermission(opts)) === \"granted\") {\r\n    return true;\r\n  }\r\n  if ((await fileHandle.requestPermission(opts)) === \"granted\") {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nasync function writeFile(handle, contents) {\r\n  const writable = await handle.createWritable();\r\n  await writable.write(contents);\r\n  await writable.close();\r\n}\r\n\r\nexport async function handleOpenProjectPicker() {\r\n  try {\r\n    if (!supportsFSAccess()) {\r\n      // Fallback: Trigger des versteckten Inputs\r\n      document.getElementById(\"project-json-upload\").click();\r\n      return;\r\n    }\r\n    const [handle] = await window.showOpenFilePicker({\r\n      types: [\r\n        {\r\n          description: \"Project JSON\",\r\n          accept: { \"application/json\": [\".json\", \".project.json\"] },\r\n        },\r\n      ],\r\n      excludeAcceptAllOption: false,\r\n      multiple: false,\r\n    });\r\n    if (!handle) return;\r\n    if (!(await verifyPermission(handle, false))) return;\r\n    const file = await handle.getFile();\r\n    const text = await file.text();\r\n    const loaded = JSON.parse(text);\r\n    const ok = loadProjectFromObject(loaded);\r\n    if (ok) {\r\n      currentProjectHandle = handle;\r\n      dirtySinceFileSave = false;\r\n    }\r\n  } catch (err) {\r\n    if (err?.name !== \"AbortError\") {\r\n      console.error(\"Open via picker failed:\", err);\r\n      showNotification(\"Datei konnte nicht geöffnet werden.\");\r\n    }\r\n  }\r\n}\r\n\r\nexport async function handleQuickSaveProjectJson() {\r\n  try {\r\n    const serialized = serializeProjectData();\r\n    if (\r\n      currentProjectHandle &&\r\n      supportsFSAccess() &&\r\n      (await verifyPermission(currentProjectHandle, true))\r\n    ) {\r\n      await writeFile(currentProjectHandle, serialized);\r\n      dirtySinceFileSave = false;\r\n      showNotification(\"Projektdatei gespeichert (Schnell speichern).\");\r\n      return;\r\n    }\r\n    // Fallback: Save As Dialog\r\n    await handleSaveProjectJsonAs(serialized);\r\n  } catch (err) {\r\n    console.error(\"Quick save failed:\", err);\r\n    showNotification(\"Speichern fehlgeschlagen.\");\r\n  }\r\n}\r\n\r\nexport async function handleSaveProjectJsonAs(preSerialized = null) {\r\n  try {\r\n    const serialized = preSerialized ?? serializeProjectData();\r\n    if (supportsFSAccess()) {\r\n      const suggestedName =\r\n        (document\r\n          .getElementById(\"main-title\")\r\n          .textContent.trim()\r\n          .replace(/\\s+/g, \"_\") || \"projekt\") + \".project.json\";\r\n      const handle = await window.showSaveFilePicker({\r\n        suggestedName,\r\n        types: [\r\n          {\r\n            description: \"Project JSON\",\r\n            accept: { \"application/json\": [\".json\", \".project.json\"] },\r\n          },\r\n        ],\r\n        excludeAcceptAllOption: false,\r\n      });\r\n      if (!(await verifyPermission(handle, true))) return;\r\n      await writeFile(handle, serialized);\r\n      currentProjectHandle = handle;\r\n      dirtySinceFileSave = false;\r\n      showNotification(\"Projektdatei gespeichert.\");\r\n      return;\r\n    }\r\n    // Fallback: Download\r\n    const blob = new Blob([serialized], { type: \"application/json\" });\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(blob);\r\n    const fileName =\r\n      document\r\n        .getElementById(\"main-title\")\r\n        .textContent.trim()\r\n        .replace(/\\s+/g, \"_\") || \"projekt\";\r\n    link.download = `${fileName}.project.json`;\r\n    link.click();\r\n    URL.revokeObjectURL(link.href);\r\n    dirtySinceFileSave = false;\r\n    showNotification(\"Projektdatei gespeichert.\");\r\n  } catch (err) {\r\n    if (err?.name !== \"AbortError\") {\r\n      console.error(\"Save As failed:\", err);\r\n      showNotification(\"Speichern fehlgeschlagen.\");\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseCSVAndRender(csvText) {\r\n  try {\r\n    const lines = csvText.trim().split(\"\\n\");\r\n    const headers = lines\r\n      .shift()\r\n      .split(\",\")\r\n      .map((h) => h.trim().replace(/\"/g, \"\"));\r\n    const data = lines.map((line) => {\r\n      const values = line.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n      const obj = {};\r\n      headers.forEach((header, index) => {\r\n        let value = (values[index] || \"\")\r\n          .trim()\r\n          .replace(/^\"|\"$/g, \"\")\r\n          .replace(/\"\"/g, '\"');\r\n        obj[header] = value;\r\n      });\r\n      return obj;\r\n    });\r\n\r\n    const teamsMap = new Map();\r\n    const baselineKeys = headers\r\n      .filter((h) => h.startsWith(\"baseline_\"))\r\n      .map((h) => h.replace(\"baseline_\", \"\"));\r\n\r\n    data.forEach((row) => {\r\n      if (!row.teamId) return;\r\n      if (!teamsMap.has(row.teamId)) {\r\n        teamsMap.set(row.teamId, {\r\n          id: row.teamId,\r\n          name: row.teamName,\r\n          tasks: [],\r\n          baselines: [],\r\n          lastTaskId: 0,\r\n          planningMode: row.planningMode || \"backward\",\r\n          delayReference: row.delayReference || \"planned\",\r\n        });\r\n      }\r\n      const team = teamsMap.get(row.teamId);\r\n      const taskId = parseInt(row.taskId);\r\n      const taskData = {\r\n        ...row,\r\n        taskId,\r\n        dependency: (row.dependency || \"\").split(\";\").filter((id) => id.trim()),\r\n      };\r\n      team.tasks.push(taskData);\r\n      team.lastTaskId = Math.max(team.lastTaskId, taskId);\r\n\r\n      const baselineTask = { taskId };\r\n      let hasBaselineData = false;\r\n      baselineKeys.forEach((key) => {\r\n        const baselineHeader = `baseline_${key}`;\r\n        if (row[baselineHeader]) {\r\n          baselineTask[key] = row[baselineHeader];\r\n          hasBaselineData = true;\r\n        }\r\n      });\r\n\r\n      if (hasBaselineData) {\r\n        team.baselines.push(baselineTask);\r\n      }\r\n    });\r\n\r\n    if (teamsMap.size === 0)\r\n      return showNotification(\r\n        \"Keine gültigen Team-Daten in der CSV-Datei gefunden.\"\r\n      );\r\n\r\n    appState.teams = Array.from(teamsMap.values());\r\n    appState.teams.forEach((team) => calculateAll(team.id));\r\n    renderApp();\r\n    saveStateToLocalStorage(null);\r\n    showNotification(\"Projekt erfolgreich geladen!\");\r\n  } catch (error) {\r\n    console.error(\"CSV Parse Error:\", error);\r\n    showNotification(\"Ein Fehler ist beim Parsen der CSV-Datei aufgetreten.\");\r\n  }\r\n}\r\n\r\nexport function handleSaveToCSV() {\r\n  if (appState.teams.length === 0)\r\n    return showNotification(\"Keine Daten zum Speichern vorhanden.\");\r\n\r\n  const columnKeys = appState.config.columns.map((c) => c.key);\r\n  const baselineKeysToSave = [\"plannedStart\", \"plannedEnd\", \"duration\"];\r\n  const baselineHeaders = baselineKeysToSave.map((k) => `baseline_${k}`);\r\n  const csvHeaders = [\r\n    \"teamId\",\r\n    \"teamName\",\r\n    \"planningMode\",\r\n    \"delayReference\",\r\n    ...columnKeys,\r\n    ...baselineHeaders,\r\n  ];\r\n\r\n  const dataRows = appState.teams.flatMap((team) => {\r\n    const baselineMap = new Map(\r\n      (team.baselines || []).map((b) => [b.taskId, b])\r\n    );\r\n    return team.tasks.map((task) => {\r\n      const row = {\r\n        teamId: team.id,\r\n        teamName: team.name,\r\n        planningMode: team.planningMode,\r\n        delayReference: team.delayReference || \"planned\",\r\n      };\r\n\r\n      columnKeys.forEach((key) => {\r\n        let value = task[key];\r\n        if (Array.isArray(value)) value = value.join(\";\");\r\n        if (\r\n          typeof value === \"string\" &&\r\n          (value.includes(\",\") || value.includes('\"') || value.includes(\"\\n\"))\r\n        ) {\r\n          value = `\"${value.replace(/\\\"/g, '\"\"')}\"`;\r\n        }\r\n        row[key] = value;\r\n      });\r\n\r\n      const baselineTask = baselineMap.get(task.taskId);\r\n      baselineKeysToSave.forEach((key) => {\r\n        row[`baseline_${key}`] = baselineTask ? baselineTask[key] || \"\" : \"\";\r\n      });\r\n\r\n      return row;\r\n    });\r\n  });\r\n\r\n  let csvContent = csvHeaders.join(\",\") + \"\\n\";\r\n  csvContent += dataRows\r\n    .map((row) => csvHeaders.map((header) => row[header] ?? \"\").join(\",\"))\r\n    .join(\"\\n\");\r\n\r\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n  const link = document.createElement(\"a\");\r\n  link.href = URL.createObjectURL(blob);\r\n  const fileName =\r\n    document\r\n      .getElementById(\"main-title\")\r\n      .textContent.trim()\r\n      .replace(/\\s+/g, \"_\") || \"projekt\";\r\n  link.download = `${fileName}.csv`;\r\n  link.click();\r\n  URL.revokeObjectURL(link.href);\r\n}\r\n\r\n// --- Kombinierte Projektdatei (JSON) laden ---\r\nexport function handleProjectJsonUpload(event) {\r\n  const file = event.target.files[0];\r\n  if (!file) return;\r\n  const reader = new FileReader();\r\n  reader.onload = (e) => {\r\n    try {\r\n      const loaded = JSON.parse(e.target.result);\r\n      const ok = loadProjectFromObject(loaded);\r\n      if (ok) {\r\n        currentProjectHandle = null;\r\n        dirtySinceFileSave = false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Projekt-JSON Parse Error:\", error);\r\n      showNotification(\r\n        \"Ein Fehler ist beim Laden der Projektdatei aufgetreten.\"\r\n      );\r\n    }\r\n  };\r\n  reader.readAsText(file);\r\n}\r\n\r\n// --- Kombinierte Projektdatei (JSON) speichern ---\r\nexport function handleSaveProjectJson() {\r\n  // Beibehalten als expliziter Download-Export\r\n  if (!appState) return;\r\n\r\n  const serialized = serializeProjectData();\r\n\r\n  const blob = new Blob([serialized], { type: \"application/json\" });\r\n  const link = document.createElement(\"a\");\r\n  link.href = URL.createObjectURL(blob);\r\n  const fileName =\r\n    document\r\n      .getElementById(\"main-title\")\r\n      .textContent.trim()\r\n      .replace(/\\s+/g, \"_\") || \"projekt\";\r\n  link.download = `${fileName}.project.json`;\r\n  link.click();\r\n  URL.revokeObjectURL(link.href);\r\n  dirtySinceFileSave = false;\r\n}\r\n","// event-handlers.js\r\n// Bündelt alle Event-Handler und Aktionen, die durch Benutzerinteraktion ausgelöst werden.\r\nimport { appState, updateTaskState, saveStateToLocalStorage } from \"./state.js\";\r\nimport {\r\n  renderApp,\r\n  showConfirmation,\r\n  showNotification,\r\n  updateSaveStatus,\r\n} from \"./ui.js\";\r\nimport { calculateAll, topologicalSort } from \"./core-logic.js\";\r\nimport { getTargetIds } from \"./utils.js\";\r\nimport { saveAndMarkDirty } from \"./file-handler.js\";\r\n\r\nexport function handleTeamChange(e) {\r\n  const target = e.target;\r\n  const { teamId, taskId } = getTargetIds(target);\r\n  if (!teamId) return;\r\n\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n  if (!team) return;\r\n\r\n  if (target.classList.contains(\"column-width-select\")) {\r\n    handleColumnWidthChange(target.dataset.columnKey, target.value);\r\n    return;\r\n  }\r\n\r\n  // --- NEU: Event-Handler für den Planungsmodus-Wechsel ---\r\n  if (target.classList.contains(\"planning-mode-select\")) {\r\n    team.planningMode = target.value;\r\n    calculateAll(teamId);\r\n    renderApp();\r\n    saveAndMarkDirty();\r\n    return;\r\n  }\r\n\r\n  // --- NEU: Event-Handler für die Delay-Referenz ---\r\n  if (target.classList.contains(\"delay-reference-select\")) {\r\n    team.delayReference = target.value;\r\n    calculateAll(teamId);\r\n    renderApp();\r\n    saveAndMarkDirty();\r\n    return;\r\n  }\r\n\r\n  // --- NEU: Toggle Kritischer Pfad ---\r\n  if (target.classList.contains(\"critical-path-toggle\")) {\r\n    team.showCriticalPath = target.checked;\r\n    renderApp();\r\n    saveAndMarkDirty();\r\n    return;\r\n  }\r\n\r\n  let shouldRecalculate = false;\r\n  if (target.classList.contains(\"dependency-checkbox\")) {\r\n    const dropdown = target.closest(\".dependency-dropdown\");\r\n    const checkedBoxes = dropdown.querySelectorAll(\r\n      \".dependency-checkbox:checked\"\r\n    );\r\n    updateTaskState(\r\n      teamId,\r\n      taskId,\r\n      \"dependency\",\r\n      Array.from(checkedBoxes).map((cb) => cb.value)\r\n    );\r\n    shouldRecalculate = true;\r\n  } else {\r\n    const key = target.dataset.key;\r\n    updateTaskState(teamId, taskId, key, target.value);\r\n    if (\r\n      [\r\n        \"duration\",\r\n        \"plannedEnd\",\r\n        \"actualEnd\",\r\n        \"dependency\",\r\n        \"status\",\r\n        \"plannedStart\",\r\n      ].includes(key)\r\n    ) {\r\n      shouldRecalculate = true;\r\n    }\r\n\r\n    // Auto-Set/Unset Actual End on status change\r\n    if (key === \"status\") {\r\n      const task = team.tasks.find((t) => t.taskId === taskId);\r\n      if (task) {\r\n        if (target.value === \"Completed\") {\r\n          const today = new Date();\r\n          const yyyy = today.getUTCFullYear();\r\n          const mm = String(today.getUTCMonth() + 1).padStart(2, \"0\");\r\n          const dd = String(today.getUTCDate()).padStart(2, \"0\");\r\n          task.actualEnd = `${yyyy}-${mm}-${dd}`;\r\n        } else if (task.actualEnd) {\r\n          task.actualEnd = \"\";\r\n        }\r\n      }\r\n    }\r\n\r\n    // Auto-set status when actualEnd changes manually\r\n    if (key === \"actualEnd\") {\r\n      const task = team.tasks.find((t) => t.taskId === taskId);\r\n      if (task) {\r\n        if (target.value) {\r\n          task.status = \"Completed\";\r\n        } else if (task.status === \"Completed\") {\r\n          task.status = \"Not Started\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (shouldRecalculate) calculateAll(teamId);\r\n  renderApp();\r\n  saveAndMarkDirty();\r\n}\r\n\r\nexport function handleTeamInput(e) {\r\n  const target = e.target;\r\n  const { teamId, taskId } = getTargetIds(target);\r\n\r\n  if (target.id === \"main-title\" || target.id === \"main-subtitle\") {\r\n    appState.config[target.id === \"main-title\" ? \"title\" : \"subtitle\"] =\r\n      target.textContent;\r\n    saveAndMarkDirty();\r\n    return;\r\n  }\r\n  if (!teamId) return;\r\n\r\n  if (target.classList.contains(\"team-name\")) {\r\n    const team = appState.teams.find((t) => t.id === teamId);\r\n    if (team) team.name = target.textContent;\r\n  } else {\r\n    const key = target.dataset.key;\r\n    if (target.tagName === \"TEXTAREA\") {\r\n      target.style.height = \"auto\";\r\n      target.style.height = target.scrollHeight + \"px\";\r\n    }\r\n    updateTaskState(teamId, taskId, key, target.value);\r\n  }\r\n  saveAndMarkDirty();\r\n}\r\n\r\nexport function handleTeamClick(e) {\r\n  const target = e.target;\r\n  const { teamId, taskId } = getTargetIds(target);\r\n  if (!teamId) return;\r\n\r\n  if (target.closest(\".toggle-collapse-btn\") && !target.closest(\".team-name\")) {\r\n    const team = appState.teams.find((t) => t.id === teamId);\r\n    if (team) {\r\n      team.isCollapsed = !team.isCollapsed;\r\n      saveAndMarkDirty();\r\n      renderApp();\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (target.classList.contains(\"gantt-zoom-btn\")) {\r\n    const direction = target.dataset.ganttZoom;\r\n    const step = 2,\r\n      minZoom = 10,\r\n      maxZoom = 60;\r\n    let currentZoom = appState.config.ganttSettings.dayWidth;\r\n    currentZoom =\r\n      direction === \"in\"\r\n        ? Math.min(maxZoom, currentZoom + step)\r\n        : Math.max(minZoom, currentZoom - step);\r\n    appState.config.ganttSettings.dayWidth = currentZoom;\r\n    renderApp();\r\n    saveAndMarkDirty();\r\n    return;\r\n  }\r\n\r\n  if (target.classList.contains(\"toggle-gantt-btn\")) {\r\n    const section = document.getElementById(teamId);\r\n    const ganttWrapper = section.querySelector(\".gantt-wrapper\");\r\n    const ganttControls = section.querySelector(\".gantt-controls\");\r\n    const isHidden = ganttWrapper.classList.toggle(\"hidden\");\r\n    ganttControls.classList.toggle(\"hidden\", isHidden);\r\n    target.textContent = isHidden\r\n      ? \"Gantt-Chart anzeigen\"\r\n      : \"Gantt-Chart verbergen\";\r\n    return;\r\n  }\r\n\r\n  if (target.classList.contains(\"dependency-dropdown-button\")) {\r\n    const panel = target.nextElementSibling;\r\n    const isVisible = panel.classList.contains(\"visible\");\r\n\r\n    document\r\n      .querySelectorAll(\".dependency-dropdown-panel.visible\")\r\n      .forEach((p) => p.classList.remove(\"visible\"));\r\n    document\r\n      .querySelectorAll(\".team-section-active\")\r\n      .forEach((s) => s.classList.remove(\"team-section-active\"));\r\n    document\r\n      .querySelectorAll(\".table-container.overflow-visible\")\r\n      .forEach((c) => c.classList.remove(\"overflow-visible\"));\r\n    document\r\n      .querySelectorAll(\".team-content.overflow-visible\")\r\n      .forEach((c) => c.classList.remove(\"overflow-visible\"));\r\n\r\n    if (!isVisible) {\r\n      panel.classList.add(\"visible\");\r\n      const teamSection = target.closest(\".team-section\");\r\n      teamSection?.classList.add(\"team-section-active\");\r\n      teamSection\r\n        ?.querySelector(\".team-content\")\r\n        ?.classList.add(\"overflow-visible\");\r\n      teamSection\r\n        ?.querySelector(\".table-container\")\r\n        ?.classList.add(\"overflow-visible\");\r\n    }\r\n  } else if (target.classList.contains(\"add-task-btn\")) {\r\n    addTask(teamId);\r\n  } else if (target.classList.contains(\"delete-task-btn\")) {\r\n    showConfirmation(`Möchtest du Task ${taskId} wirklich löschen?`, () =>\r\n      deleteTask(teamId, taskId)\r\n    );\r\n  } else if (target.classList.contains(\"sort-tasks-btn\")) {\r\n    sortTasksByDependency(teamId);\r\n  } else if (target.classList.contains(\"set-team-baseline-btn\")) {\r\n    setBaselineForTeam(teamId);\r\n  } else if (target.classList.contains(\"screenshot-gantt-btn\")) {\r\n    captureGanttScreenshot(teamId, target);\r\n  } else if (target.classList.contains(\"duplicate-team-btn\")) {\r\n    duplicateTeam(teamId);\r\n  } else if (target.classList.contains(\"delete-team-btn\")) {\r\n    deleteTeamWithConfirmation(teamId);\r\n  }\r\n}\r\n\r\nexport function createNewTeam() {\r\n  const existingIds = appState.teams.map(\r\n    (t) => parseInt(t.id.replace(\"team\", \"\")) || 0\r\n  );\r\n  const newId = (existingIds.length > 0 ? Math.max(...existingIds) : 0) + 1;\r\n  // --- NEU: Standard-Planungsmodus für neue Teams ---\r\n  appState.teams.push({\r\n    id: `team${newId}`,\r\n    name: `Neues Team ${newId}`,\r\n    tasks: [],\r\n    lastTaskId: 0,\r\n    baselines: [],\r\n    isCollapsed: false,\r\n    planningMode: \"backward\",\r\n    delayReference: \"planned\",\r\n    showCriticalPath: false,\r\n  });\r\n  renderApp();\r\n  saveAndMarkDirty();\r\n}\r\n\r\nfunction duplicateTeam(sourceTeamId) {\r\n  const source = appState.teams.find((t) => t.id === sourceTeamId);\r\n  if (!source) return;\r\n\r\n  const existingIds = appState.teams.map(\r\n    (t) => parseInt(t.id.replace(\"team\", \"\")) || 0\r\n  );\r\n  const newNumericId =\r\n    (existingIds.length > 0 ? Math.max(...existingIds) : 0) + 1;\r\n  const newTeamId = `team${newNumericId}`;\r\n\r\n  // Deep copy of tasks and baselines, drop transient fields\r\n  const cleanTask = (task) => {\r\n    const {\r\n      plannedStart_date,\r\n      plannedEnd_date,\r\n      actualEnd_date,\r\n      forwardEnd_date,\r\n      baseline,\r\n      cycleError,\r\n      isTerminal,\r\n      ...rest\r\n    } = task;\r\n    // Ensure dependency is a shallow-copied array of strings\r\n    const dependency = (rest.dependency || []).map((d) => String(d));\r\n    return { ...rest, dependency };\r\n  };\r\n\r\n  const newTasks = (source.tasks || []).map((t) => cleanTask({ ...t }));\r\n  const newBaselines = JSON.parse(JSON.stringify(source.baselines || []));\r\n  const newLastTaskId = newTasks.reduce(\r\n    (m, t) => Math.max(m, parseInt(t.taskId) || 0),\r\n    0\r\n  );\r\n\r\n  const clone = {\r\n    id: newTeamId,\r\n    name: `${source.name} (Kopie)`,\r\n    tasks: newTasks,\r\n    baselines: newBaselines,\r\n    lastTaskId: newLastTaskId,\r\n    isCollapsed: source.isCollapsed || false,\r\n    planningMode: source.planningMode || \"backward\",\r\n    delayReference: source.delayReference || \"planned\",\r\n    showCriticalPath: source.showCriticalPath || false,\r\n  };\r\n\r\n  appState.teams.push(clone);\r\n  calculateAll(clone.id);\r\n  renderApp();\r\n  saveAndMarkDirty();\r\n  showNotification(`Team \"${source.name}\" wurde dupliziert.`);\r\n}\r\n\r\nfunction addTask(teamId) {\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n  if (!team) return;\r\n  team.lastTaskId++;\r\n  const newTask = { taskId: team.lastTaskId, dependency: [] };\r\n  appState.config.columns.forEach((col) => {\r\n    if (col.default) newTask[col.key] = col.default;\r\n  });\r\n  team.tasks.push(newTask);\r\n  calculateAll(teamId);\r\n  renderApp();\r\n  saveAndMarkDirty();\r\n}\r\n\r\nfunction deleteTask(teamId, taskId) {\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n  if (!team) return;\r\n  team.tasks = team.tasks.filter((t) => t.taskId !== taskId);\r\n  team.tasks.forEach((task) => {\r\n    if (task.dependency?.includes(String(taskId))) {\r\n      task.dependency = task.dependency.filter(\r\n        (depId) => depId !== String(taskId)\r\n      );\r\n    }\r\n  });\r\n  calculateAll(teamId);\r\n  renderApp();\r\n  saveAndMarkDirty();\r\n}\r\n\r\nfunction handleColumnWidthChange(key, newWidth) {\r\n  const col = appState.config.columns.find((c) => c.key === key);\r\n  if (col) col.width = newWidth;\r\n  renderApp();\r\n  saveAndMarkDirty();\r\n}\r\n\r\nfunction sortTasksByDependency(teamId) {\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n  if (!team) return;\r\n  const { sorted, hasCycle } = topologicalSort(team.tasks);\r\n  if (hasCycle) {\r\n    showNotification(\r\n      \"Fehler: Ein zirkulärer Verweis wurde entdeckt. Bitte die Abhängigkeiten korrigieren.\"\r\n    );\r\n    return;\r\n  }\r\n  team.tasks = sorted.map((id) => team.tasks.find((t) => t.taskId === id));\r\n  renderApp();\r\n  saveAndMarkDirty();\r\n}\r\n\r\nfunction setBaselineForTeam(teamId) {\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n  if (!team) return;\r\n\r\n  showConfirmation(\r\n    `Möchten Sie den aktuellen Status für Team \"${team.name}\" als Baseline festlegen? Eine bestehende Baseline für dieses Team wird überschrieben.`,\r\n    () => {\r\n      team.baselines = JSON.parse(JSON.stringify(team.tasks));\r\n      calculateAll(team.id);\r\n      renderApp();\r\n      saveAndMarkDirty();\r\n      showNotification(\r\n        `Baseline für Team \"${team.name}\" wurde erfolgreich gesetzt!`\r\n      );\r\n    }\r\n  );\r\n}\r\n\r\nasync function captureGanttScreenshot(teamId, button) {\r\n  const teamSection = document.getElementById(teamId);\r\n  const ganttContainer = teamSection?.querySelector(\".gantt-container\");\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n\r\n  if (!ganttContainer || !team) {\r\n    showNotification(\r\n      \"Fehler: Das Gantt-Chart zum Exportieren wurde nicht gefunden.\"\r\n    );\r\n    return;\r\n  }\r\n\r\n  const originalButtonText = button.textContent;\r\n  button.textContent = \"Exportiere...\";\r\n  button.disabled = true;\r\n\r\n  const ganttTimeline = ganttContainer.querySelector(\".gantt-timeline\");\r\n  const timelineHeader = ganttTimeline.querySelector(\".gantt-header-container\");\r\n  const fullWidth = timelineHeader.scrollWidth;\r\n  const taskListWidth =\r\n    ganttContainer.querySelector(\".gantt-tasks\").offsetWidth;\r\n\r\n  const originalContainerStyle = ganttContainer.style.cssText;\r\n  const originalTimelineStyle = ganttTimeline.style.cssText;\r\n\r\n  ganttContainer.style.width = `${taskListWidth + fullWidth + 10}px`;\r\n  ganttContainer.style.gridTemplateColumns = `${taskListWidth}px 5px ${fullWidth}px`;\r\n  ganttTimeline.style.overflowX = \"visible\";\r\n\r\n  try {\r\n    const canvas = await html2canvas(ganttContainer, {\r\n      useCORS: true,\r\n      scale: 2,\r\n      backgroundColor: \"#ffffff\",\r\n      width: ganttContainer.scrollWidth,\r\n      height: ganttContainer.scrollHeight,\r\n      windowWidth: ganttContainer.scrollWidth,\r\n      windowHeight: ganttContainer.scrollHeight,\r\n    });\r\n\r\n    const link = document.createElement(\"a\");\r\n    const teamName = team.name.replace(/\\s+/g, \"_\");\r\n    link.download = `Gantt-Chart_${teamName}.png`;\r\n    link.href = canvas.toDataURL(\"image/png\");\r\n    link.click();\r\n  } catch (error) {\r\n    console.error(\"Fehler beim Erstellen des Screenshots:\", error);\r\n    showNotification(\r\n      \"Ein unerwarteter Fehler ist beim Exportieren aufgetreten.\"\r\n    );\r\n  } finally {\r\n    button.textContent = originalButtonText;\r\n    button.disabled = false;\r\n    ganttContainer.style.cssText = originalContainerStyle;\r\n    ganttTimeline.style.cssText = originalTimelineStyle;\r\n  }\r\n}\r\n\r\nfunction deleteTeamWithConfirmation(teamId) {\r\n  const team = appState.teams.find((t) => t.id === teamId);\r\n  if (!team) return;\r\n  showConfirmation(\r\n    `Möchtest du das Team \"${team.name}\" wirklich löschen? Diese Aktion kann nicht rückgängig gemacht werden.`,\r\n    () => {\r\n      appState.teams = appState.teams.filter((t) => t.id !== teamId);\r\n      renderApp();\r\n      saveAndMarkDirty();\r\n      showNotification(`Team \"${team.name}\" wurde gelöscht.`);\r\n    }\r\n  );\r\n}\r\n\r\nexport function handleClearStorage() {\r\n  showConfirmation(\r\n    \"Möchten Sie wirklich alle lokal gespeicherten Daten löschen? Dies kann nicht rückgängig gemacht werden und die Seite wird neu geladen.\",\r\n    () => {\r\n      localStorage.removeItem(\"projectPlannerState_v1\");\r\n      updateSaveStatus();\r\n      showNotification(\"Lokale Daten wurden gelöscht. Seite wird neu geladen.\");\r\n      setTimeout(() => window.location.reload(), 1500);\r\n    }\r\n  );\r\n}\r\n"],"names":["$c7997aef068a9f19$export$d1b4f50ae6861a7","d1","d2","Math","round","$c7997aef068a9f19$export$6b862160d295c8e","dateString","includes","date","Date","isNaN","getTime","UTC","getUTCFullYear","getUTCMonth","getUTCDate","$c7997aef068a9f19$export$bea76c49158eff2b","day","String","padStart","month","year","$c7997aef068a9f19$export$c478c72000d71dfb","toISOString","split","$c7997aef068a9f19$export$39bf2e94a8a42e53","startDate","days","addedDays","setUTCDate","getUTCDay","$c7997aef068a9f19$export$4061524e7bdcf14c","subtractedDays","$c7997aef068a9f19$export$3f4215a9b5171bad","diff","start","min","end","max","tempDate","$c7997aef068a9f19$export$f84dd52f254f04e7","element","row","closest","section","teamId","dataset","taskId","parseInt","$f796a5fd6447bc1a$export$6302a168e58508f7","taskMap","team","$b0be7539779f7498$export$b72e390a9ebe1648","teams","find","t","id","Map","tasks","map","baselineTaskMap","baselines","minBaselineStartDate","minActualStartDate","forEach","cycleError","plannedStart_date","plannedStart","plannedEnd_date","plannedEnd","actualEnd_date","actualEnd","baselineTask","get","baseline","duration","durationCalc","baselineStartDate","actualStartDate","projectDelay","hasAnyActuals","some","allDependencyIds","Set","task","dependency","depId","add","isTerminal","has","hasCycle","cycleNodes","sorted","$f796a5fd6447bc1a$export$5c0523ec6add5477","nodeId","planningMode","sortedTaskIds","anchorStartDate","latestDepEndDate","length","depIdStr","depTask","effectiveDepEndDate","depDrivenStartDate","effectiveStartDate","$f796a5fd6447bc1a$var$calculateProgressForecast","progressBasedForecasts","progressBasedEndDate","forecastStartDate","isAnchor","depForecastEndDate","set","progressDate","planDate","forwardEnd_date","$f796a5fd6447bc1a$var$calculateBackwardPlan","successors","push","i","calculatedEndDate","taskSuccessors","minSuccessorStartDate","successorId","successorTask","$f796a5fd6447bc1a$var$calculateBackwardForecast","earliestPossibleEndDates","realityChainTasks","earliestStartDate","dependencyInRealityChain","depEndDate","earliestEndDate","earliestPossibleDate","referencePlannedDate","shiftedPlannedDate","comparisonDate","useBaseline","delayReference","delay","status","forwardEnd","criticalPath","$f796a5fd6447bc1a$var$calculateCriticalPath","latestTask","currentTask","criticalPredecessor","currentStartDate","expectedStartDate","adj","inDegree","queue","degree","u","shift","v","$ccbcfb0497dcc85a$export$fbf8042ad30617f1","e","target","classList","contains","preventDefault","ganttContainer","resizer","tasksColumn","querySelector","startX","clientX","startWidth","offsetWidth","doDrag","moveEvent","newWidth","style","gridTemplateColumns","stopDrag","document","removeEventListener","config","ganttSettings","taskColumnWidth","$b0be7539779f7498$export$794ff936f9d5ff00","$bfc1bd9ef2af3f3a$export$e5c6bdc1d9c7bb9e","addEventListener","$61f6a02d249e0911$var$statusChart","$61f6a02d249e0911$export$82bc199367468d80","metricsContainer","getElementById","$61f6a02d249e0911$var$getFilteredTasks","flatMap","selectedTeam","innerHTML","destroy","endDate","totalDelay","completionPercentage","statusCounts","$61f6a02d249e0911$var$calculateKPIs","completedCount","undefined","$61f6a02d249e0911$var$renderStatusChart","ctx","getContext","Chart","type","data","labels","datasets","backgroundColor","borderColor","borderWidth","hoverOffset","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","$bfc1bd9ef2af3f3a$export$bd45a425ac802846","textContent","subtitle","teamsContainer","scrollY","window","openGanttCharts","querySelectorAll","el","initialPrompt","remove","filter","selectedValue","value","option","createElement","name","appendChild","teamEl","$bfc1bd9ef2af3f3a$var$renderTeam","className","widthOptions","visibleColumns","columns","col","key","startsWith","headerHtml","optionsHtml","w","width","replace","join","label","dayWidth","isCollapsed","showCriticalPath","$bfc1bd9ef2af3f3a$var$renderTaskRow","rowClass","cells","hasDependencies","placeholder","default","isReadOnly","selectedDeps","selectedNames","Boolean","opt","taskName","substring","statusOptions","o","displayValue","isBold","delayClass","cellClass","Completed","Blocked","ganttElement","DAY_WIDTH","TASK_COL_WIDTH","minDate","maxDate","baselineDuration","plannedDuration","plannedStartDate","projectStart","projectEnd","monthsHeader","daysHeader","gridRows","weekendColumns","totalDays","currentMonth","monthDayCount","monthNames","dayFontSize","monthFontSize","isWeekend","getFullYear","totalTimelineWidth","today","setUTCHours","todayOffset","todayMarker","bars","index","barHtml","topPosition","baselineCalendarDays","baselineOffset","plannedCalendarDays","plannedOffset","calendarDays","offset","statusClass","isCritical","fullLabel","taskNames","scrollTo","statusText","statusWarning","$bfc1bd9ef2af3f3a$export$f7dc72e91f29c7d7","message","modal","onclick","$bfc1bd9ef2af3f3a$export$d59ed8aab1dcc70a","onConfirm","onCancel","$b0be7539779f7498$var$LOCAL_STORAGE_KEY","$b0be7539779f7498$var$saveTimeout","isCentered","statusCallback","clearTimeout","setTimeout","stateToSave","JSON","parse","stringify","endsWith","localStorage","setItem","error","console","$b0be7539779f7498$export$bf5236ebcba83552","$6f43f11e51b5b35f$var$currentProjectHandle","$6f43f11e51b5b35f$var$dirtySinceFileSave","$6f43f11e51b5b35f$export$2d34fbc2c71a78ff","$6f43f11e51b5b35f$export$9ad2828a0a3f778","$6f43f11e51b5b35f$var$serializeProjectData","visibleGanttTasks","compactTeams","depSet","buildDependencySet","s","d","compactTasks","isSource","compact","responsible","comment","compactBaselines","b","base","lastTaskId","reduce","m","$6f43f11e51b5b35f$var$loadProjectFromObject","loaded","appState","Array","isArray","$6f43f11e51b5b35f$var$supportsFSAccess","isSecureContext","showOpenFilePicker","showSaveFilePicker","$6f43f11e51b5b35f$var$verifyPermission","fileHandle","readWrite","opts","mode","queryPermission","requestPermission","$6f43f11e51b5b35f$var$writeFile","handle","contents","writable","createWritable","write","close","$6f43f11e51b5b35f$export$fa346957d93536fa","click","types","description","accept","excludeAcceptAllOption","multiple","file","getFile","err","$6f43f11e51b5b35f$export$fa43b9a89289c997","serialized","$6f43f11e51b5b35f$export$45540aa3bfa32b7","preSerialized","suggestedName","trim","blob","Blob","link","href","URL","createObjectURL","fileName","download","revokeObjectURL","$6f43f11e51b5b35f$export$ce766a5fa32b2368","event","files","reader","FileReader","onload","result","readAsText","$decb44ba0b4d213b$export$2fc9146f71db8986","$decb44ba0b4d213b$var$handleColumnWidthChange","c","columnKey","checked","shouldRecalculate","from","dropdown","cb","yyyy","mm","dd","$decb44ba0b4d213b$export$5005ca5a9e9034e6","tagName","height","scrollHeight","$decb44ba0b4d213b$export$efb0ff1ec282a4c2","direction","ganttZoom","currentZoom","ganttWrapper","ganttControls","isHidden","toggle","panel","nextElementSibling","isVisible","p","teamSection","$decb44ba0b4d213b$var$addTask","newTask","$decb44ba0b4d213b$var$deleteTask","$decb44ba0b4d213b$var$sortTasksByDependency","$decb44ba0b4d213b$var$setBaselineForTeam","$decb44ba0b4d213b$var$captureGanttScreenshot","$decb44ba0b4d213b$var$duplicateTeam","sourceTeamId","source","existingIds","newNumericId","newTeamId","newTasks","cleanTask","rest","newBaselines","newLastTaskId","clone","$decb44ba0b4d213b$var$deleteTeamWithConfirmation","$decb44ba0b4d213b$export$93a920e9f88fd87f","newId","button","originalButtonText","disabled","ganttTimeline","fullWidth","timelineHeader","scrollWidth","taskListWidth","originalContainerStyle","cssText","originalTimelineStyle","overflowX","canvas","html2canvas","useCORS","scale","windowWidth","windowHeight","teamName","toDataURL","$decb44ba0b4d213b$export$29f954c931b8b409","removeItem","location","reload","openBtn","quickSaveBtn","saveAsBtn","isMac","navigator","platform","toUpperCase","metaKey","ctrlKey","toLowerCase","shiftKey","dataTransfer","returnValue","getItem","savedState","loadedState","copyrightEl"],"version":3,"file":"projectplanner.0b6eb669.js.map"}